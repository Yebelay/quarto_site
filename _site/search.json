[
  {
    "objectID": "posts/rp_bundesliga-table/index.html",
    "href": "posts/rp_bundesliga-table/index.html",
    "title": "Excess attraction in the Bundesliga",
    "section": "",
    "text": "Footnotes\n\nTechnically, I calculate excess attraction as the difference between the actual number of members a club has and the number of members that we would expect if the total number of all club members are redistributed according to the share of population which live closest to each club.↩︎\nThe value calculated by Ansgar Wolsing.↩︎"
  },
  {
    "objectID": "posts/tt2022-08-09_ferriswheels/index.html",
    "href": "posts/tt2022-08-09_ferriswheels/index.html",
    "title": "How far does that ferris wheel roll?",
    "section": "",
    "text": "What I love about data visualization is how it combines creative thinking (what do I want to show?) with technical programming skills (how do I show this?). Nowhere do you combine these two things as elegantly as in the weekly tidy tuesday challenges. Here, data wizards around the word play and practice with fascinating datasets from chocolate bar ratings to the mobility of ERASMUS students to – this week – data on ferris wheels around the world.1 As someone who goes pale in any kind of rollercoaster, ferris wheels feel just about advantageous enough to start my own tidy tuesday journey.\n\n\n\nBefore opening R, I think about what I find fascinating about the topic and what I want to convey with my visualization. Here I am sticking to some descriptive analysis and won’t overthink it, so let’s just go with one of the first thing that came to my mind… ferris wheels are really big!\n\nIf a ferris wheel would be an actual wheel, how far would it travel during one rotation?2\n\nThe message gives me part of the structure for the visualization. Here, I want to select a few examples from different countries and show the diameter on the x-axis. I’ve created a lot of horizontal bar charts for a consultancy this summer, so naturally this is my starting point.\nA great thing about these just-for-fun challenges is that you can use them to add 1-2 new skills to your visualization toolbox. For this challenge I want to learn two things:\n\nHow do I add icons (ferris wheels 🎡, obviously) instead of dots in the chart?\nHow do I add country flags on the y-axis.\n\nI don’t want to spend the entire evening on this, so I think it is important to limit myself to only these two new features. I will also concentrate on them and not care too much (yet) about other things, like titles, background, themes, etc…\n\n\n\n\n\n\nImportant\n\n\n\nBecause this isn’t a mystery novel, I am giving away how the visualization will look like in the end. Don’t click if you want to keep the suspense…\n\n\n\n\n\nWith these initial thoughts out of the way, I can roughly sketch the visualization process and outline of this post.\n\nA first look at the data. Choose which points to show.\nCreate the simplest graph that shows the intended message.\nAdd the ferris wheel icons.\nAdd the country flags.\nClean up the graph.\n\n\n\n\n\n\n\n\n\nLet’s first install the necessary packages and load and save the data.\n#install.packages(c(\"tidytuesdayR\", \"tidyverse\", \"here\", \"ggimage\", \"countrycode\", \"ggtext\"))\nlibrary(tidyverse)\nlibrary(here)\n#data &lt;- tidytuesdayR::tt_load(\"2022-08-09\")$wheels\n#write_rds(data, here(\"posts\", \"tt2022-08-09_ferriswheels\", \"data\", \"wheels\"))\ndata &lt;- read_rds(here(\"posts\", \"tt2022-08-09_ferriswheels\", \"data\", \"wheels\"))\n\n\n\nThe entire dataset collects 22 variables on 73 ferris wheels in 26 different countries. This is way to much information to display, so let’s keep only a handful of ferris wheels and only information on their name, country, height and diameter.\n\ndata &lt;- data |&gt; \n  select(country, name, height, diameter) |&gt; \n  group_by(country) |&gt; \n  filter(height == max(height, na.rm = T),\n         country %in% c(\"Austria\", \"Canada\", \"China\", \"Mexico\", \"UK\", \"USA\")) |&gt;\n  ungroup() |&gt; \n  mutate(across(c(height, diameter), round, 0),\n         country = factor(country))\n\nThis is the data that we will use. As a comparison, I will add data from a more typical wheel: my dutch bicycle wheel.\n\ndata &lt;- bind_rows(data, tibble(country = \"Netherlands\", name = \"Philipp's bike wheel\", height = 0.67, diameter = 0.67))\nknitr::kable(data)\n\n\n\n\ncountry\nname\nheight\ndiameter\n\n\n\n\nChina\nBeijing Great Wheel\n693.00\n643.00\n\n\nUSA\nGolden Gate Flyer\n728.00\n700.00\n\n\nUK\nLondon Eye\n443.00\n394.00\n\n\nCanada\nNiagara SkyWheel\n175.00\n167.00\n\n\nMexico\nStar of Puebla\n262.00\n229.00\n\n\nAustria\nWiener Riesenrad\n212.00\n200.00\n\n\nNetherlands\nPhilipp’s bike wheel\n0.67\n0.67\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data, aes(y = fct_rev(country), x = diameter)) + \n  labs(x = \"\", y = \"\",\n       # x = \"Diameter of the highest ferris wheel in the country (in meter)\"\n       title = \"How far do you travel during one rotation in the largest ferris wheels?\",\n       caption = \"Data from ferriswheel package by Emil Hvitfeldt, #tidytuesday August 2022\") +\n  scale_x_continuous(limits = c(0, 800)) +\n  theme_minimal() +\n  theme(panel.grid = element_blank())\np +\n  geom_point() +\n  geom_segment(aes(y = country, yend = country, x = 0, xend = diameter), linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis isn’t pretty, but that’s not the point. Having a bare-minimum working example helps to think about whether the graph type fits and what can be done to emphasise the key message. It also helps to create a to-do list of things to improve: like a different order of ferris wheels, maybe adding an empty row to separate the bike data from the ferris wheel data, a label or subtitle that puts the ferris wheel in relation to the bike wheel, another background color, adding ‘meter’ to the x-axis and more). But let us first tackle the two big learnings that I wanted to get out of the challenge: replacing the dots with icons (now I also need a bike, 🚲) and adding the country flags.\n\n\n\nAs always, there are many ways to Rome. Here I am going with the ggimage package maintained by Guangchuang YU. I have not used this before, but a look at the online vignette makes me hopeful that I can use this for the ferris wheel icons and the country flags 😃\nThere are two ways we can go. The first is to use the ggimage::geom_emoji and to insert the ferris wheel and bicycle emojis that I have used throughout the post. That seems simple, we just need the unicode to pass it to the function. That’s easy to look up at, e.g. https://unicode.org/emoji/charts/full-emoji-list.html.\n\ndata$size = if_else(data$name == \"Philipp's bike wheel\", 0.075, data$diameter / max(data$diameter) * 0.25)\np +\n  geom_segment(aes(y = fct_rev(country), yend = fct_rev(country), x = 0, xend = diameter), linetype = \"dashed\", color = \"gray\", position = position_nudge(y = - 0.25)) +\n  ggimage::geom_emoji(aes(image = if_else(name == \"Philipp's bike wheel\", \"1f6b2\", \"1f3a1\")), position = position_nudge(y = (data$size / 0.3) - 0.25), size = data$size)\n\n\n\n\n\n\n\n\nThis looks OK. The most complicated part was actually that I wanted to scale the size of the image by the size of the ferris wheel, which required making an extra size column and experimenting a lot with position_nudge to let the dashed line go to the bottom of the icon, not to the middle. But I am not super happy with the emoji’s, so let’s try to download some images of ferris wheels and use those with ggimage::geom_image() instead.\nI’ll first download a simple transparent ferris wheel png file (from here) and use a bike icon (from here).\n\nferris_path &lt;- here(\"posts\", \"tt2022-08-09_ferriswheels\", \"images\", \"ferriswheel.png\")\nbike_path &lt;- here(\"posts\", \"tt2022-08-09_ferriswheels\", \"images\", \"bike.png\")\n\np1 &lt;- p +\n  geom_segment(aes(y = fct_rev(country), yend = fct_rev(country), x = 0, xend = diameter),\n               linetype = \"dashed\", color = \"gray\", \n               position = position_nudge(y = - 0.25)) +\n  ggimage::geom_image(\n    aes(image = if_else(data$name == \"Philipp's bike wheel\", bike_path, ferris_path)), \n    position = position_nudge(y = (data$size / 0.27) - 0.25, \n                              x = if_else(data$name == \"Philipp's bike wheel\", 15, 0)), \n    size = data$size * 1.5)\np1\n\n\n\n\n\n\n\n\nI’m happy with this. Onwards to do the country flags!\n\n\n\nIn the plots so far, I kept the country names on the y-axis. However, I would prefer to use the actual names of the ferris wheel and replace the country names with flags. We’ll continue with the ggimage package, which contains a geom_flag() function. The package expects country codes (e.g. NL, US), so we need to transform the names by hand using the countrycodes package.\n\n# Create the country labels from the country names\ndata$code &lt;- countrycode::countrycode(data$country, origin = \"country.name\", destination = \"iso2c\") \n\n# Sort the factor levels of the 'name' variable alphabetically *by country* (the combination of arrange and fct_inorder does that, there are surely smarter ways)\ndata &lt;- data |&gt; arrange(country)\ndata$name &lt;- fct_inorder(factor(data$name))\n\n# Create the graph again from scratch because instead of mapping the country to the y axis, I now\n# map the name to the y axis. Again, surely there are smarter ways to do that...\n# I also move the flags a bit to the left of the x axis and expand the limits of the plot accordingly.\np2 &lt;- \n  ggplot(data, aes(y = fct_rev(name), x = diameter)) + \n  geom_segment(aes(y = fct_rev(name), yend = fct_rev(name), x = 0, xend = diameter),\n               linetype = \"dashed\", color = \"gray\", \n               position = position_nudge(y = - 0.25)) +\n  ggimage::geom_image(aes(image = if_else(name == \"Philipp's bike wheel\", bike_path, ferris_path)),\n                      position = position_nudge(y = (data$size / 0.27) - 0.25,\n                                                x = if_else(data$name == \"Philipp's bike wheel\", 15, 0)),\n                      size = data$size * 1.5) +\n  ggimage::geom_flag(x = -70, aes(image = code)) +\n  labs(x = \"\", y = \"\",\n       title = \"How far do you travel during one rotation in the largest ferris wheels?\",\n       caption = \"Data from ferriswheel package by Emil Hvitfeldt, #tidytuesday August 2022\") +\n  scale_x_continuous(limits = c(-50, 800)) +\n  theme_minimal() +\n  theme(panel.grid = element_blank())\np2\n\n\n\n\n\n\n\n\nThis looks fine. The main headache in the code chunk above was replacing the mapping of the y axis to show the name (and not the country) and correcting the ordering of the observations.\n\n\n\nI am happy with how the flags and ferris wheels turned out and am now ready to go back to the to-do list from the beginning with some minor things to clean up the graph. This is a playful challenge and ferris wheels are fun, so let’s go for a very light pinkish background colour. I am also adding a text box (using the ggtext package) to use my bicycle wheel as an example to show just how big these ferris wheels are.\n\n\nCode\nturns &lt;- pull(round(data[which(data$diameter == max(data$diameter)), \"diameter\"] / data[data$name == \"Philipp's bike wheel\", \"diameter\"]))\ndata$name &lt;- fct_relevel(data$name, \"Philipp's bike wheel\")\n\np3 &lt;- \n  ggplot(data, aes(y = fct_rev(name), x = diameter)) + \n  geom_segment(aes(y = fct_rev(name), yend = fct_rev(name), x = 0, xend = diameter),\n               linetype = \"dashed\", color = \"gray\", alpha = 0.5,\n               position = position_nudge(y = -0.25)) +\n  ggimage::geom_image(aes(image = if_else(name == \"Philipp's bike wheel\", bike_path, ferris_path)),\n                      position = position_nudge(y = (data$size / 0.27) - 0.25,\n                                                x = if_else(data$name == \"Philipp's bike wheel\", 15, 0)),\n                      size = data$size * 1.5) +\n  ggimage::geom_flag(x = -70, aes(image = code)) +\n  labs(x = \"\", y = \"\",\n       title = \"How far do you travel with one rotation of the largest wheels in the world?\",\n       caption = \"Visualization by Philipp Kollenda / @pkollenda . Accompanying blog post on my website. \\n Data from ferriswheel package by Emil Hvitfeldt, #tidytuesday August 2022\") +\n  ggtext::geom_textbox(aes(x = 300, y = 6.75, hjust = 0,\n                           label = glue::glue(\"My bike wheel has to &lt;span style='color: red;'&gt;turn {turns} times&lt;/span&gt; to travel the same distance as one rotation with the largest ferris wheel.\")),\n                       fill = \"papayawhip\", width = unit(6, \"cm\"), size = 3) +\n  scale_x_continuous(limits = c(-50, 800), labels = scales::label_number(suffix = \" meter\")) +\n  theme_minimal() +\n  theme(panel.grid = element_blank(), legend.position = \"none\",\n        plot.title.position = \"plot\", plot.title = ggtext::element_textbox_simple(size = 20, padding = margin(c(10, 10, 20, 10))),\n        axis.text.y = element_text(size = 12)) +\n  theme(plot.background = element_rect(fill = \"#FFFAFA\"))\np3\n\n\n\n\n\n\n\n\n\n\n\n\nI am happy with how this visualization turned out and glad I learned something about how to insert flags, icons and other images with the ggimage package. I will now hop on my bicycle and think of the Golden Gate Flyer… approximately every 1045 (bike) wheel turn."
  },
  {
    "objectID": "posts/qp2022-08-05_my-first-website/index.html",
    "href": "posts/qp2022-08-05_my-first-website/index.html",
    "title": "Build a simple website with R and Quarto in under 30 10 minutes.",
    "section": "",
    "text": "I am especially excited about the possibility to quickly build websites (for blogs, teaching, sharing notes, publishing research etc.) with Quarto, without having to leave my R environment where I do all my coding anyways. Let’s get started!\n\nLet’s start by building a very simple website. I have three things on my wishlist:\n\nthe website should have multiple pages,\nan intuitive way to navigate between them and\nshow some images, code and output.\n\nWe won’t worry about hosting yet (that’s for another post) and simply use quarto.pub (more on that below).\n\n\n\n\n\n\ntl;dr: Here is how to get a website up and running in three steps\n\n\n\n\nIn RStudio, start a new project and choose Quarto website.\nChange content in the .qmd files and configuration in the .yml file.\nPublish to quarto pub via the terminal.\n\n\n\nHere is the final website https://philipp.quarto.pub/my-first-website But, let’s look at each of the steps in more detail.\n\nStep 1: Create the Quarto website project\nIn RStudio, we create a new project and choose Quarto website from the list of available templates. If that does not show up for you, chances are that you need to update RStudio to the latest version (i.e. RStudio 2022.07.1+554 “Spotted Wakerobin” works).\nA click on create project will create the scaffolding for our new website:\n\nTwo .qmd files that will become pages on our website.\nA .yml file that we use to keep track of the options.\nA styles.css file that we use to customize the appearance of the website1.\n\nIf we click on “Render” (or use Shift + Cmd + K) the document will (hopefully) render and show up in the Viewer pane of RStudio. That’s all and we could already publish this as a functioning website (🥳), but let’s add at least a minimal amount of our own content.\n\n\nStep 2: Changing the content (.qmd) and the structure (.yml) of our website.\nWhen we initialized the project, Quarto graciously already created two .qmd files which will be two pages on our website and a .yml file which records settings about the structure, general options, appearance and so on.\nWe are going to change the default content of the index.qmd file and the name and content of the about.qmd file. To do that, simply open the respective .qmd file and edit what you want to change. We won’t focus here on how to author Quarto documents, but the documentation on https://quarto.org/docs/authoring is amazing. For completeness, I put the code that I used in our website at the bottom of this post.\nNow, ideally we want to see the effects of our changes immediately. There are two options. We can switch on “Render on Save” and see the updated page in RStudios Viewer pane whenever we save. Or – way cooler IMHO – we can preview the entire website by typing quarto preview in the terminal field of RStudio (next to the console, where???).\n\n\n\n\n\n\nPreview a website without publishing it by typing quarto preview in the terminal.\n\n\n\nWhere the .qmd files tell the browser what the website should display, the .yml file tells the browser how to structure the website. This is where you change the design, add pages, choose a logo and so much more. We’ll not go into detail on the site configuration yaml here and just focus on getting a simple website up-and-running, but luckily the Quarto team has you covered.\n\n\nStep 3: Publish your website.\nThis is it! It is time to let our creation leave the confines of the local computer and roam the world wide web. But we need a home address for our website and for the sake of using the simplest possible solution we will publish the website using quarto pub.\nIf you are already signed up and authenticated for Quarto Pub, great! Keep reading below.\n\n\nOtherwise click here to show the details.\n\nIf you still need to make an account, go to the quarto pub website (https://quartopub.com/), click Sign up, confirm your email and choose a username. The username will be in the URL of every website you create, so best to choose something highly professional 🤓.\n\nOnce you created your account (or if you already had one), open https://quartopub.com (this should show an empty profile page if you have not previously created a website) and just keep it open.\nNow comes the magic. Head back to RStudio and type quarto publish quarto-pub in the terminal (termi-WHAT?). If you are logged in to quarto pub in a browser, the terminal will show ? Publish with account:, your email address on the next line and in gray the words Use another account…. Don’t be fooled (like I was). This is not an error message and the console is not trying to tell you to use another account, it’s merely asking… So, confidently press Enter and it will ask about the site name. Press enter again and voilà, Quarto will upload your .qmd and .yml files to quarto pub and publish your website.\nYou (and everyone else!) can now see your website at YOUR-USERNAME.quarto.pub/YOUR-WEBSITE-NAME/. Here is the site that I just created in during this post https://philipp.quarto.pub/my-first-website/.\n\n\n\n\nAppendix\n\nStupid mistakes that tripped me up and that you don’t need to repeat.\n\nWhere is the terminal in RStudio?\nIf you do not use the terminal often it is easy to overlook it even though it is hidden in plain sight.  ##### Why does quarto pub ask me a different name / email address… When I first published this site, I diligently typed quarto publish quarto-pub in the terminal and was greeted by the message: “Use a different name…”.\n\n\nI fixed a typo but already published the site, what now?\nDon’t despair, unlike certain social media sites, quarto.pub does come with an edit button. Simply change what you want to change in the .qmd or .yml files and don’t forget to publish again via the termina. The console will ask you if you want to update the already published site… yes, please! That last step is easy to miss though, because RStudio’s Render on Save and Preview make it so easy to expect that everything just updates automatically.\n\n\n\n\nThe content of the index.qmd file.\nNote that I am not actually including the first line, only the part beginning with the yaml dashes (---).\n```{r}\n---\ntitle: \"Welcome to my first website\"\n---\n\nThis is a Quarto website that I created in just a few minutes. Read about it here and find amazing resources on <https://quarto.org/docs/websites>.\n\n![](images/screenshot.png)\n```\n\n\nThe content of the about.qmd file.\n---\ntitle: \"Ferries Wheels\"\n---\n\n## Some fun with ferries wheels\n\n```{r}\n#| label: ferries-plot\n#| code-line-numbers: true\n#| code-fold: true\n#| message: false\n# install.packages(\"tidytuesdayR\") install.packages(\"tidyverse\")\nlibrary(tidyverse)\nlibrary(ggplot2)\n#data <- tidytuesdayR::tt_load(\"2022-08-09\")$wheels\ndata <- read_rds(\"data/wheels\")\nhighest <- data |> \n  group_by(country) |> \n  filter(height == max(height, na.rm = T),\n         country %in% c(\"Canada\", \"China\", \"Mexico\", \"Taiwan\", \"Japan\", \"Philippines\", \"UK\", \"USA\")) |> \n  select(country, height, diameter)\nggplot(highest, aes(y = fct_rev(factor(country)), x = diameter)) + \n  geom_point() +\n  geom_segment(aes(y = country, yend = country, x = 0, xend = diameter), linetype = \"dashed\") +\n  labs(x = \"\", y = \"\",\n       # x = \"Diameter of the highest ferries wheel in the country (in meter)\"\n       title = \"How far do you travel during one rotation in the highest ferries wheels?\",\n       caption = \"Data from ferriewheel package by Emil Hvitfeldt, #tidytuesday August 2022\") +\n  scale_x_continuous(limits = c(0, 800)) +\n  theme_minimal()\n```\n\n\n\n\n\n\nFootnotes\n\n\nWe won’t worry about customizing anything yet and the file is empty anyways.↩︎"
  },
  {
    "objectID": "posts/tt2022-08-16_psychometric/index.html",
    "href": "posts/tt2022-08-16_psychometric/index.html",
    "title": "A fancy title",
    "section": "",
    "text": "# datalist &lt;- tidytuesdayR::tt_load(\"2022-08-16\")\n# write_rds(datalist, here(\"posts\", \"tt2022-08-16_psychometric\", \"data\", \"psychometric\"))\ndatalist &lt;- read_rds(here(\"posts\", \"tt2022-08-16_psychometric\", \"data\", \"psychometric\"))\ncharacters &lt;- datalist$characters\nstats &lt;- datalist$psych_stats\n\n\n\n\ndata &lt;- characters |&gt; filter()"
  },
  {
    "objectID": "posts/nt_alphabetic-sorting/index.html",
    "href": "posts/nt_alphabetic-sorting/index.html",
    "title": "Alphabetically sorting your source code character vectors",
    "section": "",
    "text": "For week 33 of #TidyTuesday 2022 I had to manually select names from a dataset. So, I typed something like\n\nfilter(df, name %in% c(\"The Witcher\", \"Hamilton\", \"Westworld\", \"Sense8\"))\n\nDo you see what’s wrong with this? No? Congratulations 🎉, you have a much healthier, more pragmatic approach to coding than I do.\nI, on the other hand, was bothered by the fact that the series names were not in alphabetical order. But, “hey”, I thought, R is a “well-developed, simple and effective programming language”, so why not use it to bring my source code into alphabetical order.\n\n\n\n\n\n\n\n\n\n\n\nThe context is not really important, so I won’t go into detail on what this dataset was about. The trick is super generally and applies to many situations anyways. But you can see my final plot on Twitter and the accompanying blog post on my website.\n\n\n\n\nMy goal is to get alphabetically sorted output that I can simply copy + paste into my source file (or write to the file with write_lines()).\n\nx <- c(\"The Witcher\", \"Hamilton\", \"Westworld\", \"Sense8\")\nprint(x)\n\n[1] \"The Witcher\" \"Hamilton\"    \"Westworld\"   \"Sense8\"     \n\ndput(sort(x))\n\nc(\"Hamilton\", \"Sense8\", \"The Witcher\", \"Westworld\")\n\n\nSuccess! That last line is something I can copy. 😃 And…it only took approximately 1000 hours of googling to find dput() 🙈 Eventually the Similar questions that pop-up just before you create a stackoverflow question came to the rescue.\nIt would be really cool to immediately copy the output of the dput() statement to the clipboard. There is the clipr package which looks promising, but that is something for another evening."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Yebelay Berehan",
    "section": "",
    "text": "Biostatistician\nLearn more about me →"
  },
  {
    "objectID": "pages/teaching.html",
    "href": "pages/teaching.html",
    "title": "Teaching",
    "section": "",
    "text": "PhD Level Courses (Tinbergen Institute)\n2015: Macroeconomics 1 (TA Professor Bruegemann)\n\n\nMaster Level Courses (Vrije Universiteit Amsterdam)\n2020: Introduction to Econometrics (TA for Professor Dobbelaere), Evaluation 4.3/5\n2020: Applied Econometrics (TA for Professor Dobbelaere), Evaluation 4.1/5\n\n\nBachelor Level Courses (Vrije Universiteit Amsterdam)\n2022: Macroeconomics I (TA for Professor Bruegemann), Evaluation 4.9/5\n2018-2020: Macroeconomics I (TA for Professor Bartelsman), Evaluation 3.5/5\n2018-2020: Foundations of Macroeconomics (TA for Professor Zant), Evaluation 4.1/5\n2018-2020: Inclusive Growth and Sustainability (TA for Professor Hoefkes and Professor Lanjouw), Evaluation 4.25/5\n\n\nThesis Supervision\n2020: Economics Bachelor Thesis: “Does Foreign Direct Investment Promote Growth in Sub-Saharan Africa? Insights from Sectoral Decomposition”\n2020: Economics Master Thesis: “Impact of Chinese FDI on Debt and Imports from China” and “The Effect of Educational Inequality on Income Inequality”\n2020: Economics Bachelor Thesis: “The Relationship between Charity Advertisements and Misconceptions about Low-Income Countries”\n2019: Economics Master Thesis: “Reassessing the Impact of Inequality on Economic Growth”"
  },
  {
    "objectID": "pages/research.html",
    "href": "pages/research.html",
    "title": "Research",
    "section": "",
    "text": "I focus on innovative forms of financing sustainable economic development, from impact investing to agricultural finance. I also study agricultural markets, with a focus on smallholder farmer value chains in East Africa."
  },
  {
    "objectID": "pages/research.html#peer-reviewed-publications",
    "href": "pages/research.html#peer-reviewed-publications",
    "title": "Research",
    "section": "Peer-reviewed Publications",
    "text": "Peer-reviewed Publications\n\nFinancial Returns or Social Impact? What Motivates Impact Investors’ Lending to Firms in Low-Income Countries (Journal of Banking & Finance, 2022 | open-access link)\n\nI analyze 70,000 transactions by retail impact investors on a peer-to-peer lending platform that intermediates loans to firms in low-income countries. Loans pay interest to investors and publicize indicators of expected social impact. Financial returns significantly influence investors’ decisions: a one percentage point increase in the interest rate increases funding speed seven-fold, investment probability two-fold and transaction size by 122 Euro. Expected social impact influences investors’ perception but has no influence (for female empowerment, employees and beneficiaries) or limited influence (for turnover) on investors’ funding decisions. When all available loans pay the same interest rates, female borrowers - but not firms with many employees or beneficiaries - are more likely to be chosen, suggesting that variation in financial returns can crowd out salient dimensions of social impact. The study implies that peer-to-peer lending platforms should function as gatekeepers of social impact and cannot outsource the evaluation of social impact to retail impact investors.\n\n\nI’m excited to share my first-ever publication 🥳At times doing a PhD feels like filling a pool with water one cup at a time and it's difficult to see progress. I'm glad that my first publishing experience was smooth with great comments from editor & referee.A thread: [1/11] pic.twitter.com/72doP4ziiJ— Philipp Kollenda (@philippkollenda) July 23, 2021"
  },
  {
    "objectID": "pages/research.html#working-papers",
    "href": "pages/research.html#working-papers",
    "title": "Research",
    "section": "Working Papers",
    "text": "Working Papers\n\nBad News Travel Fast … and Decrease Credit Supply in Peer-to-Peer Lending\n\nUsing a new dataset of transactions on a Dutch peer-to-peer lending platform, I investigate the stability of credit supply when investors experience repayment delays. I exploiting a natural experiment, where some investors experience repayment delays in impact investment loans and show that the delays cause aﬀected investors to decrease their credit supply by 206€ on average, resulting in a shortage of credit of almost 400,000€ to borrowers unconnected to the delays. Repayment delays thus have substantial negative externalities on the ability of ﬁrms to raise capital through the peer-to-peer lending platform.\n\n\n\nRipe for Contract? Avocado contract farming in Kenya improves agricultural investments, knowledge and prices. Link to working paper and to presentation\n\nWe evaluate the impact of a multi-layered contract farming intervention that connected smallholder farmers in central Kenya to avocado exporting companies, provided training in good agricultural practices and certified farmer organizations according to the global good agricultural practices (GAP) production standard. Using panel data from 2015 and 2017 we show that the intervention was successful at delivering its immediate goals. It increased the share of farmers that sold to companies, were recently trained and received the GAP certification. Contract farming significantly improved the sales prices of farmers, and knowledge of avocado-farming practices and led to increased investments into the Hass avocado variety which is in higher demand in export markets. We find suggestive, albeit not statistically significant, evidence that contract farming improved farmer income and shifted labour from family to hired labour. At the same time, contract farmers produced less of the local avocado variety, leading to a significant decrease in total quantity sold during the transition to the export-oriented Hass avocado variety. We contribute to the literature by quantifying the impact of a multi-layered contract farming intervention. Panel data allows us to estimate a doubly-robust difference-in-differences design, giving us more confidence to interpret our estimates as causal evidence of contract farming than traditional cross-sectional studies allow for."
  },
  {
    "objectID": "pages/motivation.html",
    "href": "pages/motivation.html",
    "title": "Motivation",
    "section": "",
    "text": "I get energy from working together with others to build a better world, where prosperity is created sustainably, redistributed globally and shared by all.\nMy professional ambition is to help people and organizations combine data with rigorous methodologies to generate evidence that allows us to improve people’s livelihoods through sustainable economic development.\n\n\n\nTweets by philippkollenda"
  },
  {
    "objectID": "pages/about.html",
    "href": "pages/about.html",
    "title": "About Me",
    "section": "",
    "text": "I have dual master’s degrees in Biostatistics from Stellenbosch University and Statistics from Addis Ababa University, coupled with 11+ years of experience in project leading, data management, analysis, and teaching. These experiences equipped me with a deep understanding of complex data, its management, analysis and use with application of different statistical methods. I have interest in causal inference, longitudinal data analysis and survival data analysis. I have a piece of statistical software training experiences (R, SAS, SPSS)."
  },
  {
    "objectID": "pages/presentations.html",
    "href": "pages/presentations.html",
    "title": "Presentations",
    "section": "",
    "text": "You can also view the slides in full screen.\n\n\n\nDownload the workshop materials here."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "Excess attraction in the Bundesliga\n\n\nWhich teams would have the most members if location was the only thing that mattered?\n\n\n\ninteractive\n\n\nfootball\n\n\n\n\n\n\n\n\n\nAug 18, 2022\n\n\nYebelay\n\n\n\n\n\n\n\n\n\n\n\n\nAlphabetically sorting your source code character vectors\n\n\nNeat little tricks, Episode 1\n\n\n\nneat-tricks\n\n\n\n\n\n\n\n\n\nAug 17, 2022\n\n\nYebelay\n\n\n\n\n\n\n\n\n\n\n\n\nA fancy title\n\n\n#tidytuesday data visualization with R, ggplot and A COOL PACKAGE\n\n\n\ntidytuesday\n\n\ndataviz\n\n\nhow-to\n\n\n\n\n\n\n\n\n\nAug 16, 2022\n\n\nYebelay\n\n\n\n\n\n\n\n\n\n\n\n\nHow far does that ferris wheel roll?\n\n\n#tidytuesday data visualization with R, ggplot and ggimage\n\n\n\ntidytuesday\n\n\ndataviz\n\n\nhow-to\n\n\n\n\n\n\n\n\n\nAug 9, 2022\n\n\nYebelay\n\n\n\n\n\n\n\n\n\n\n\n\nBuild a simple website with R and Quarto in under 30 10 minutes.\n\n\nAnd then spend hours tweaking it.\n\n\n\nquarto\n\n\nhow-to\n\n\n\n\n\n\n\n\n\nAug 6, 2022\n\n\nPhilipp Kollenda\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "pages/education.html",
    "href": "pages/education.html",
    "title": "Education",
    "section": "",
    "text": "Stellenbosch University, South Africa| CapeTown\n\nMSc in Biostatistics|January 2020 - April 2022\n\nAddis Ababa University, Ethiopia| Addis Ababa, Ethiopia\n\nMSc in Statistics(Biostatistics)| Sptember 2015 - July 2017\n\nWollo University, Ethiopia| Dessie, Ethiopia\n\nBSc in Statistics | September 2009 - July 2012"
  },
  {
    "objectID": "pages/exprience.html",
    "href": "pages/exprience.html",
    "title": "Expreniece",
    "section": "",
    "text": "Survey Manager at: Center for Evaluation and Development (C4ED) from ‘2023-05-01’ to present\nSenior Research Officer at: Frontieri consulting Plc from ‘2022-07-04’ to ‘2023-04-30’\nBiostatistics Experience and Technical Assistance (BETA) internship/consulting at: CDC Ethiopa from ‘2021-07-01’ to ‘2022-07-12’\nLecturer at: “Debre Markos University” from ‘2013-01-01’ date_end: ’’"
  },
  {
    "objectID": "pages/publication.html",
    "href": "pages/publication.html",
    "title": "Publication",
    "section": "",
    "text": "I focus on innovative forms of financing sustainable economic development, from impact investing to agricultural finance. I also study agricultural markets, with a focus on smallholder farmer value chains in East Africa."
  },
  {
    "objectID": "pages/publication.html#peer-reviewed-publications",
    "href": "pages/publication.html#peer-reviewed-publications",
    "title": "Publication",
    "section": "Peer-reviewed Publications",
    "text": "Peer-reviewed Publications\n\nFinancial Returns or Social Impact? What Motivates Impact Investors’ Lending to Firms in Low-Income Countries (Journal of Banking & Finance, 2022 | open-access link)\n\nI analyze 70,000 transactions by retail impact investors on a peer-to-peer lending platform that intermediates loans to firms in low-income countries. Loans pay interest to investors and publicize indicators of expected social impact. Financial returns significantly influence investors’ decisions: a one percentage point increase in the interest rate increases funding speed seven-fold, investment probability two-fold and transaction size by 122 Euro. Expected social impact influences investors’ perception but has no influence (for female empowerment, employees and beneficiaries) or limited influence (for turnover) on investors’ funding decisions. When all available loans pay the same interest rates, female borrowers - but not firms with many employees or beneficiaries - are more likely to be chosen, suggesting that variation in financial returns can crowd out salient dimensions of social impact. The study implies that peer-to-peer lending platforms should function as gatekeepers of social impact and cannot outsource the evaluation of social impact to retail impact investors.\n\n\nI’m excited to share my first-ever publication 🥳At times doing a PhD feels like filling a pool with water one cup at a time and it's difficult to see progress. I'm glad that my first publishing experience was smooth with great comments from editor & referee.A thread: [1/11] pic.twitter.com/72doP4ziiJ— Philipp Kollenda (@philippkollenda) July 23, 2021"
  },
  {
    "objectID": "pages/publication.html#working-papers",
    "href": "pages/publication.html#working-papers",
    "title": "Publication",
    "section": "Working Papers",
    "text": "Working Papers\n\nBad News Travel Fast … and Decrease Credit Supply in Peer-to-Peer Lending\n\nUsing a new dataset of transactions on a Dutch peer-to-peer lending platform, I investigate the stability of credit supply when investors experience repayment delays. I exploiting a natural experiment, where some investors experience repayment delays in impact investment loans and show that the delays cause aﬀected investors to decrease their credit supply by 206€ on average, resulting in a shortage of credit of almost 400,000€ to borrowers unconnected to the delays. Repayment delays thus have substantial negative externalities on the ability of ﬁrms to raise capital through the peer-to-peer lending platform.\n\n\n\nRipe for Contract? Avocado contract farming in Kenya improves agricultural investments, knowledge and prices. Link to working paper and to presentation\n\nWe evaluate the impact of a multi-layered contract farming intervention that connected smallholder farmers in central Kenya to avocado exporting companies, provided training in good agricultural practices and certified farmer organizations according to the global good agricultural practices (GAP) production standard. Using panel data from 2015 and 2017 we show that the intervention was successful at delivering its immediate goals. It increased the share of farmers that sold to companies, were recently trained and received the GAP certification. Contract farming significantly improved the sales prices of farmers, and knowledge of avocado-farming practices and led to increased investments into the Hass avocado variety which is in higher demand in export markets. We find suggestive, albeit not statistically significant, evidence that contract farming improved farmer income and shifted labour from family to hired labour. At the same time, contract farmers produced less of the local avocado variety, leading to a significant decrease in total quantity sold during the transition to the export-oriented Hass avocado variety. We contribute to the literature by quantifying the impact of a multi-layered contract farming intervention. Panel data allows us to estimate a doubly-robust difference-in-differences design, giving us more confidence to interpret our estimates as causal evidence of contract farming than traditional cross-sectional studies allow for."
  },
  {
    "objectID": "pages/puplications.html",
    "href": "pages/puplications.html",
    "title": "Publications",
    "section": "",
    "text": "I focus on innovative forms of financing sustainable economic development, from impact investing to agricultural finance. I also study agricultural markets, with a focus on smallholder farmer value chains in East Africa."
  },
  {
    "objectID": "pages/puplications.html#peer-reviewed-publications",
    "href": "pages/puplications.html#peer-reviewed-publications",
    "title": "Publications",
    "section": "Peer-reviewed Publications",
    "text": "Peer-reviewed Publications\n\nFinancial Returns or Social Impact? What Motivates Impact Investors’ Lending to Firms in Low-Income Countries (Journal of Banking & Finance, 2022 | open-access link)\n\nI analyze 70,000 transactions by retail impact investors on a peer-to-peer lending platform that intermediates loans to firms in low-income countries. Loans pay interest to investors and publicize indicators of expected social impact. Financial returns significantly influence investors’ decisions: a one percentage point increase in the interest rate increases funding speed seven-fold, investment probability two-fold and transaction size by 122 Euro. Expected social impact influences investors’ perception but has no influence (for female empowerment, employees and beneficiaries) or limited influence (for turnover) on investors’ funding decisions. When all available loans pay the same interest rates, female borrowers - but not firms with many employees or beneficiaries - are more likely to be chosen, suggesting that variation in financial returns can crowd out salient dimensions of social impact. The study implies that peer-to-peer lending platforms should function as gatekeepers of social impact and cannot outsource the evaluation of social impact to retail impact investors.\n\n\nI’m excited to share my first-ever publication 🥳At times doing a PhD feels like filling a pool with water one cup at a time and it's difficult to see progress. I'm glad that my first publishing experience was smooth with great comments from editor & referee.A thread: [1/11] pic.twitter.com/72doP4ziiJ— Philipp Kollenda (@philippkollenda) July 23, 2021"
  },
  {
    "objectID": "pages/puplications.html#working-papers",
    "href": "pages/puplications.html#working-papers",
    "title": "Publications",
    "section": "Working Papers",
    "text": "Working Papers\n\nBad News Travel Fast … and Decrease Credit Supply in Peer-to-Peer Lending\n\nUsing a new dataset of transactions on a Dutch peer-to-peer lending platform, I investigate the stability of credit supply when investors experience repayment delays. I exploiting a natural experiment, where some investors experience repayment delays in impact investment loans and show that the delays cause aﬀected investors to decrease their credit supply by 206€ on average, resulting in a shortage of credit of almost 400,000€ to borrowers unconnected to the delays. Repayment delays thus have substantial negative externalities on the ability of ﬁrms to raise capital through the peer-to-peer lending platform.\n\n\n\nRipe for Contract? Avocado contract farming in Kenya improves agricultural investments, knowledge and prices. Link to working paper and to presentation\n\nWe evaluate the impact of a multi-layered contract farming intervention that connected smallholder farmers in central Kenya to avocado exporting companies, provided training in good agricultural practices and certified farmer organizations according to the global good agricultural practices (GAP) production standard. Using panel data from 2015 and 2017 we show that the intervention was successful at delivering its immediate goals. It increased the share of farmers that sold to companies, were recently trained and received the GAP certification. Contract farming significantly improved the sales prices of farmers, and knowledge of avocado-farming practices and led to increased investments into the Hass avocado variety which is in higher demand in export markets. We find suggestive, albeit not statistically significant, evidence that contract farming improved farmer income and shifted labour from family to hired labour. At the same time, contract farmers produced less of the local avocado variety, leading to a significant decrease in total quantity sold during the transition to the export-oriented Hass avocado variety. We contribute to the literature by quantifying the impact of a multi-layered contract farming intervention. Panel data allows us to estimate a doubly-robust difference-in-differences design, giving us more confidence to interpret our estimates as causal evidence of contract farming than traditional cross-sectional studies allow for."
  },
  {
    "objectID": "pages/about.html#education",
    "href": "pages/about.html#education",
    "title": "About Me",
    "section": "Education",
    "text": "Education\n\nStellenbosch University, South Africa| CapeTown\n\nMSc in Biostatistics|January 2020 - April 2022\n\nAddis Ababa University, Ethiopia| Addis Ababa, Ethiopia\n\nMSc in Statistics(Biostatistics)| Sptember 2015 - July 2017\n\nWollo University, Ethiopia| Dessie, Ethiopia\n\nBSc in Statistics | September 2009 - July 2012"
  },
  {
    "objectID": "pages/about.html#experience",
    "href": "pages/about.html#experience",
    "title": "About Me",
    "section": "Experience",
    "text": "Experience\n\nSurvey Manager at: Center for Evaluation and Development (C4ED) from ‘2023-05-01’ to present\nSenior Research Officer at: Frontieri consulting Plc from ‘2022-07-04’ to ‘2023-04-30’\nBiostatistics Experience and Technical Assistance (BETA) internship/consulting at: CDC Ethiopa from ‘2021-07-01’ to ‘2022-07-12’\nLecturer at: “Debre Markos University” from ‘2013-01-01’ date_end: ’’"
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contact",
    "section": "",
    "text": "Feel free to get in touch with me using the following contact details:\n\nEmail: yebelay.ma@gmail.com\nPhone: +251 93 245 3203\n\n\n\nYou can also reach me through social media or by filling out the contact form below.\n\n\nYour Name \nYour Email \nYour Message\n\n\nSend"
  },
  {
    "objectID": "contact.html#visit-us",
    "href": "contact.html#visit-us",
    "title": "Yebelay Berehan",
    "section": "Visit Us",
    "text": "Visit Us\nThe AffCom Lab is located in Fraser Hall Room #455 at the University of Kansas.\n\nStreet Address: 1415 Jayhawk Blvd, Lawrence, KS 66044\nVisitor Parking: 1218 Mississippi St, Lawrence, KS 66045"
  },
  {
    "objectID": "contact.html#email-us",
    "href": "contact.html#email-us",
    "title": "Yebelay Berehan",
    "section": "Email Us",
    "text": "Email Us"
  },
  {
    "objectID": "contact.html#get-in-touch",
    "href": "contact.html#get-in-touch",
    "title": "Contact",
    "section": "",
    "text": "You can also reach me through social media or by filling out the contact form below.\n\n\nYour Name \nYour Email \nYour Message\n\n\nSend"
  },
  {
    "objectID": "pages/presentations.html#workshop-slides",
    "href": "pages/presentations.html#workshop-slides",
    "title": "Presentations",
    "section": "",
    "text": "You can also view the slides in full screen."
  },
  {
    "objectID": "pages/presentations.html#download-workshop-materials",
    "href": "pages/presentations.html#download-workshop-materials",
    "title": "Presentations",
    "section": "",
    "text": "Download the workshop materials here."
  },
  {
    "objectID": "pages/presentations.html#spatial-data-analysis-training",
    "href": "pages/presentations.html#spatial-data-analysis-training",
    "title": "Presentations",
    "section": "",
    "text": "You can also view the slides in full screen."
  },
  {
    "objectID": "slide/index.html#section",
    "href": "slide/index.html#section",
    "title": "Spatial data analaysis Training",
    "section": "",
    "text": "Outlines\n\nWhat is spatial data and why should we use it?\nTypes of spatial data\nSpatial data in R: how to store, load, and tidy spatial data\nVisualizing spatial data\nExploring spatial data: Spatial authorization and spatial statistics to quantify relationships"
  },
  {
    "objectID": "slide/index.html#what-is-spatial-data-and-why-should-we-use-it",
    "href": "slide/index.html#what-is-spatial-data-and-why-should-we-use-it",
    "title": "Spatial data analaysis Training",
    "section": "What is Spatial data and why should we use it?",
    "text": "What is Spatial data and why should we use it?\n\nSpatial data, also known as geospatial data, refers to information that identifies the geographic location and characteristics of natural or constructed features and boundaries on the Earth.\nThis data is often represented in terms of Cartesian coordinates (x,y) for two-dimensional maps, but may also include altitude (z) for a three-dimensional representation.\nSpatial data can come in various forms including points, lines, and polygons.\nThe concept of spatial data is integral to a variety of applications that require an understanding of how different elements relate to each other within a geographical space.\nThis data can be collected through various means, including but not limited to, satellite imagery, aerial photography, and ground-based surveys."
  },
  {
    "objectID": "slide/index.html#spatial-data-formats",
    "href": "slide/index.html#spatial-data-formats",
    "title": "Spatial data analaysis Training",
    "section": "Spatial Data Formats",
    "text": "Spatial Data Formats\n\nLet us see a basic way to represent the spatial data.\nBut there is a variety of data formats to represent the data to suit different applications.\nIn most cases, spatial data formats are an extension of existing data formats.\n\n\n\n\n\n\n\n\nType\nNon-Spatial Data\nSpatial Data\n\n\n\n\nText\ncsv, json, xml\ncsv, geojson, gml, kml\n\n\nBinary/Compressed\npdf, xls, zip\nshapefile, geopdf, geopackage\n\n\nImages\ntiff, jpg, png\ngeotiff, jpeg2000\n\n\nDatabases\nSQLite, PostgreSQL, Oracle\nSpatialite, PostGIS, Oracle Spatial"
  },
  {
    "objectID": "slide/index.html#spatial-data-types",
    "href": "slide/index.html#spatial-data-types",
    "title": "Spatial data analaysis Training",
    "section": "Spatial Data Types",
    "text": "Spatial Data Types\nSpatial Data can be broadly categorized into 2 types - Vector and Raster.\n\n\n\n\n\n\n\n\nType\nSub Types\nExamples\n\n\n\n\nVector Data\nPoints: Represents features with a single coordinate pair (x, y).\nLocations of ATMs, tree\n\n\n\nLines: Represents linear features as ordered sequences of points.\nRoads, rivers, utility lines\n\n\n\nPolygons: Represents areas enclosed by closed loops of lines.\nBuildings, lakes, zones\n\n\nRaster Data\nGrids: Represents continuous data across a surface.\nSatellite images, digital elevation models (DEMs)\n\n\n\nPixels: Smallest units in a raster dataset, each with a specific value.\nValues representing color, temperature,\n\n\n\n\n\n\n\n?"
  },
  {
    "objectID": "pages/about.html#projects-and-publications",
    "href": "pages/about.html#projects-and-publications",
    "title": "About Me",
    "section": "Projects and Publications",
    "text": "Projects and Publications\nI’ve published some stuff – both academic and not – which you can find on my publications page."
  },
  {
    "objectID": "pages/about.html#consulting-and-contracted-work",
    "href": "pages/about.html#consulting-and-contracted-work",
    "title": "About Me",
    "section": "Consulting and Contracted Work",
    "text": "Consulting and Contracted Work\nTime permitting, I occasionally do some consulting and contract work. Although I specialize in education research and data analysis, I’m generally proficient with in statistical modeling, data visualization, dashboard design, and API development, among other things. If you’re interested in working with me, send me an email."
  },
  {
    "objectID": "posts/tt2022-08-09_ferriswheels/index.html#using-tidy-tuesday-to-combine-creativity-and-data-visualization-skills.",
    "href": "posts/tt2022-08-09_ferriswheels/index.html#using-tidy-tuesday-to-combine-creativity-and-data-visualization-skills.",
    "title": "How far does that ferris wheel roll?",
    "section": "",
    "text": "What I love about data visualization is how it combines creative thinking (what do I want to show?) with technical programming skills (how do I show this?). Nowhere do you combine these two things as elegantly as in the weekly tidy tuesday challenges. Here, data wizards around the word play and practice with fascinating datasets from chocolate bar ratings to the mobility of ERASMUS students to – this week – data on ferris wheels around the world.1 As someone who goes pale in any kind of rollercoaster, ferris wheels feel just about advantageous enough to start my own tidy tuesday journey.\n\n\n\nBefore opening R, I think about what I find fascinating about the topic and what I want to convey with my visualization. Here I am sticking to some descriptive analysis and won’t overthink it, so let’s just go with one of the first thing that came to my mind… ferris wheels are really big!\n\nIf a ferris wheel would be an actual wheel, how far would it travel during one rotation?2\n\nThe message gives me part of the structure for the visualization. Here, I want to select a few examples from different countries and show the diameter on the x-axis. I’ve created a lot of horizontal bar charts for a consultancy this summer, so naturally this is my starting point.\nA great thing about these just-for-fun challenges is that you can use them to add 1-2 new skills to your visualization toolbox. For this challenge I want to learn two things:\n\nHow do I add icons (ferris wheels 🎡, obviously) instead of dots in the chart?\nHow do I add country flags on the y-axis.\n\nI don’t want to spend the entire evening on this, so I think it is important to limit myself to only these two new features. I will also concentrate on them and not care too much (yet) about other things, like titles, background, themes, etc…\n\n\n\n\n\n\nImportant\n\n\n\nBecause this isn’t a mystery novel, I am giving away how the visualization will look like in the end. Don’t click if you want to keep the suspense…\n\n\n\n\n\nWith these initial thoughts out of the way, I can roughly sketch the visualization process and outline of this post.\n\nA first look at the data. Choose which points to show.\nCreate the simplest graph that shows the intended message.\nAdd the ferris wheel icons.\nAdd the country flags.\nClean up the graph.\n\n\n\n\n\n\n\n\n\nLet’s first install the necessary packages and load and save the data.\n#install.packages(c(\"tidytuesdayR\", \"tidyverse\", \"here\", \"ggimage\", \"countrycode\", \"ggtext\"))\nlibrary(tidyverse)\nlibrary(here)\n#data &lt;- tidytuesdayR::tt_load(\"2022-08-09\")$wheels\n#write_rds(data, here(\"posts\", \"tt2022-08-09_ferriswheels\", \"data\", \"wheels\"))\ndata &lt;- read_rds(here(\"posts\", \"tt2022-08-09_ferriswheels\", \"data\", \"wheels\"))\n\n\n\nThe entire dataset collects 22 variables on 73 ferris wheels in 26 different countries. This is way to much information to display, so let’s keep only a handful of ferris wheels and only information on their name, country, height and diameter.\n\ndata &lt;- data |&gt; \n  select(country, name, height, diameter) |&gt; \n  group_by(country) |&gt; \n  filter(height == max(height, na.rm = T),\n         country %in% c(\"Austria\", \"Canada\", \"China\", \"Mexico\", \"UK\", \"USA\")) |&gt;\n  ungroup() |&gt; \n  mutate(across(c(height, diameter), round, 0),\n         country = factor(country))\n\nThis is the data that we will use. As a comparison, I will add data from a more typical wheel: my dutch bicycle wheel.\n\ndata &lt;- bind_rows(data, tibble(country = \"Netherlands\", name = \"Philipp's bike wheel\", height = 0.67, diameter = 0.67))\nknitr::kable(data)\n\n\n\n\ncountry\nname\nheight\ndiameter\n\n\n\n\nChina\nBeijing Great Wheel\n693.00\n643.00\n\n\nUSA\nGolden Gate Flyer\n728.00\n700.00\n\n\nUK\nLondon Eye\n443.00\n394.00\n\n\nCanada\nNiagara SkyWheel\n175.00\n167.00\n\n\nMexico\nStar of Puebla\n262.00\n229.00\n\n\nAustria\nWiener Riesenrad\n212.00\n200.00\n\n\nNetherlands\nPhilipp’s bike wheel\n0.67\n0.67\n\n\n\n\n\n\n\n\n\np &lt;- ggplot(data, aes(y = fct_rev(country), x = diameter)) + \n  labs(x = \"\", y = \"\",\n       # x = \"Diameter of the highest ferris wheel in the country (in meter)\"\n       title = \"How far do you travel during one rotation in the largest ferris wheels?\",\n       caption = \"Data from ferriswheel package by Emil Hvitfeldt, #tidytuesday August 2022\") +\n  scale_x_continuous(limits = c(0, 800)) +\n  theme_minimal() +\n  theme(panel.grid = element_blank())\np +\n  geom_point() +\n  geom_segment(aes(y = country, yend = country, x = 0, xend = diameter), linetype = \"dashed\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis isn’t pretty, but that’s not the point. Having a bare-minimum working example helps to think about whether the graph type fits and what can be done to emphasise the key message. It also helps to create a to-do list of things to improve: like a different order of ferris wheels, maybe adding an empty row to separate the bike data from the ferris wheel data, a label or subtitle that puts the ferris wheel in relation to the bike wheel, another background color, adding ‘meter’ to the x-axis and more). But let us first tackle the two big learnings that I wanted to get out of the challenge: replacing the dots with icons (now I also need a bike, 🚲) and adding the country flags.\n\n\n\nAs always, there are many ways to Rome. Here I am going with the ggimage package maintained by Guangchuang YU. I have not used this before, but a look at the online vignette makes me hopeful that I can use this for the ferris wheel icons and the country flags 😃\nThere are two ways we can go. The first is to use the ggimage::geom_emoji and to insert the ferris wheel and bicycle emojis that I have used throughout the post. That seems simple, we just need the unicode to pass it to the function. That’s easy to look up at, e.g. https://unicode.org/emoji/charts/full-emoji-list.html.\n\ndata$size = if_else(data$name == \"Philipp's bike wheel\", 0.075, data$diameter / max(data$diameter) * 0.25)\np +\n  geom_segment(aes(y = fct_rev(country), yend = fct_rev(country), x = 0, xend = diameter), linetype = \"dashed\", color = \"gray\", position = position_nudge(y = - 0.25)) +\n  ggimage::geom_emoji(aes(image = if_else(name == \"Philipp's bike wheel\", \"1f6b2\", \"1f3a1\")), position = position_nudge(y = (data$size / 0.3) - 0.25), size = data$size)\n\n\n\n\n\n\n\n\nThis looks OK. The most complicated part was actually that I wanted to scale the size of the image by the size of the ferris wheel, which required making an extra size column and experimenting a lot with position_nudge to let the dashed line go to the bottom of the icon, not to the middle. But I am not super happy with the emoji’s, so let’s try to download some images of ferris wheels and use those with ggimage::geom_image() instead.\nI’ll first download a simple transparent ferris wheel png file (from here) and use a bike icon (from here).\n\nferris_path &lt;- here(\"posts\", \"tt2022-08-09_ferriswheels\", \"images\", \"ferriswheel.png\")\nbike_path &lt;- here(\"posts\", \"tt2022-08-09_ferriswheels\", \"images\", \"bike.png\")\n\np1 &lt;- p +\n  geom_segment(aes(y = fct_rev(country), yend = fct_rev(country), x = 0, xend = diameter),\n               linetype = \"dashed\", color = \"gray\", \n               position = position_nudge(y = - 0.25)) +\n  ggimage::geom_image(\n    aes(image = if_else(data$name == \"Philipp's bike wheel\", bike_path, ferris_path)), \n    position = position_nudge(y = (data$size / 0.27) - 0.25, \n                              x = if_else(data$name == \"Philipp's bike wheel\", 15, 0)), \n    size = data$size * 1.5)\np1\n\n\n\n\n\n\n\n\nI’m happy with this. Onwards to do the country flags!\n\n\n\nIn the plots so far, I kept the country names on the y-axis. However, I would prefer to use the actual names of the ferris wheel and replace the country names with flags. We’ll continue with the ggimage package, which contains a geom_flag() function. The package expects country codes (e.g. NL, US), so we need to transform the names by hand using the countrycodes package.\n\n# Create the country labels from the country names\ndata$code &lt;- countrycode::countrycode(data$country, origin = \"country.name\", destination = \"iso2c\") \n\n# Sort the factor levels of the 'name' variable alphabetically *by country* (the combination of arrange and fct_inorder does that, there are surely smarter ways)\ndata &lt;- data |&gt; arrange(country)\ndata$name &lt;- fct_inorder(factor(data$name))\n\n# Create the graph again from scratch because instead of mapping the country to the y axis, I now\n# map the name to the y axis. Again, surely there are smarter ways to do that...\n# I also move the flags a bit to the left of the x axis and expand the limits of the plot accordingly.\np2 &lt;- \n  ggplot(data, aes(y = fct_rev(name), x = diameter)) + \n  geom_segment(aes(y = fct_rev(name), yend = fct_rev(name), x = 0, xend = diameter),\n               linetype = \"dashed\", color = \"gray\", \n               position = position_nudge(y = - 0.25)) +\n  ggimage::geom_image(aes(image = if_else(name == \"Philipp's bike wheel\", bike_path, ferris_path)),\n                      position = position_nudge(y = (data$size / 0.27) - 0.25,\n                                                x = if_else(data$name == \"Philipp's bike wheel\", 15, 0)),\n                      size = data$size * 1.5) +\n  ggimage::geom_flag(x = -70, aes(image = code)) +\n  labs(x = \"\", y = \"\",\n       title = \"How far do you travel during one rotation in the largest ferris wheels?\",\n       caption = \"Data from ferriswheel package by Emil Hvitfeldt, #tidytuesday August 2022\") +\n  scale_x_continuous(limits = c(-50, 800)) +\n  theme_minimal() +\n  theme(panel.grid = element_blank())\np2\n\n\n\n\n\n\n\n\nThis looks fine. The main headache in the code chunk above was replacing the mapping of the y axis to show the name (and not the country) and correcting the ordering of the observations.\n\n\n\nI am happy with how the flags and ferris wheels turned out and am now ready to go back to the to-do list from the beginning with some minor things to clean up the graph. This is a playful challenge and ferris wheels are fun, so let’s go for a very light pinkish background colour. I am also adding a text box (using the ggtext package) to use my bicycle wheel as an example to show just how big these ferris wheels are.\n\n\nCode\nturns &lt;- pull(round(data[which(data$diameter == max(data$diameter)), \"diameter\"] / data[data$name == \"Philipp's bike wheel\", \"diameter\"]))\ndata$name &lt;- fct_relevel(data$name, \"Philipp's bike wheel\")\n\np3 &lt;- \n  ggplot(data, aes(y = fct_rev(name), x = diameter)) + \n  geom_segment(aes(y = fct_rev(name), yend = fct_rev(name), x = 0, xend = diameter),\n               linetype = \"dashed\", color = \"gray\", alpha = 0.5,\n               position = position_nudge(y = -0.25)) +\n  ggimage::geom_image(aes(image = if_else(name == \"Philipp's bike wheel\", bike_path, ferris_path)),\n                      position = position_nudge(y = (data$size / 0.27) - 0.25,\n                                                x = if_else(data$name == \"Philipp's bike wheel\", 15, 0)),\n                      size = data$size * 1.5) +\n  ggimage::geom_flag(x = -70, aes(image = code)) +\n  labs(x = \"\", y = \"\",\n       title = \"How far do you travel with one rotation of the largest wheels in the world?\",\n       caption = \"Visualization by Philipp Kollenda / @pkollenda . Accompanying blog post on my website. \\n Data from ferriswheel package by Emil Hvitfeldt, #tidytuesday August 2022\") +\n  ggtext::geom_textbox(aes(x = 300, y = 6.75, hjust = 0,\n                           label = glue::glue(\"My bike wheel has to &lt;span style='color: red;'&gt;turn {turns} times&lt;/span&gt; to travel the same distance as one rotation with the largest ferris wheel.\")),\n                       fill = \"papayawhip\", width = unit(6, \"cm\"), size = 3) +\n  scale_x_continuous(limits = c(-50, 800), labels = scales::label_number(suffix = \" meter\")) +\n  theme_minimal() +\n  theme(panel.grid = element_blank(), legend.position = \"none\",\n        plot.title.position = \"plot\", plot.title = ggtext::element_textbox_simple(size = 20, padding = margin(c(10, 10, 20, 10))),\n        axis.text.y = element_text(size = 12)) +\n  theme(plot.background = element_rect(fill = \"#FFFAFA\"))\np3\n\n\n\n\n\n\n\n\n\n\n\n\nI am happy with how this visualization turned out and glad I learned something about how to insert flags, icons and other images with the ggimage package. I will now hop on my bicycle and think of the Golden Gate Flyer… approximately every 1045 (bike) wheel turn."
  },
  {
    "objectID": "posts/tt2022-08-09_ferriswheels/index.html#footnotes",
    "href": "posts/tt2022-08-09_ferriswheels/index.html#footnotes",
    "title": "How far does that ferris wheel roll?",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nSidenote: Neal Grantham has a cool Shiny app to browse previous tidy tuesday submissions.↩︎\nPerceptive readers may have noticed that this is just the diameter of the wheel. But, doesn’t that sound much less exciting?↩︎"
  },
  {
    "objectID": "talks/index.html",
    "href": "talks/index.html",
    "title": "Yebelay Berehan",
    "section": "",
    "text": "Keeping it Tidy\n       \n            \n                \n                \n                    R\n                \n                \n                \n                    tidyverse\n                \n                \n            \n            \n    Using the tidyverse to organize, transform, and visualize data.\n    \n        Details\n    \n    \n    \n        Slides\n    \n    \n    \n    \n        Website\n    \n    \n    \n  \n\n  \n    \n      rstudio::conf(2022) 2022-07-28\n    \n    Cultivating Your Own R Ecosystem as a Solo Contributor\n       \n            \n                \n                \n                    R\n                \n                \n                \n                    tidyverse\n                \n                \n            \n            \n    Learn how you can begin to build your own R ecosystem, step by step, to increase the efficiency and impact of your work, even as a solo contributor.\n    \n        Details\n    \n    \n    \n        Slides\n    \n    \n    \n    \n  \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/index.html",
    "href": "blog/index.html",
    "title": "\nBlog Posts\n",
    "section": "",
    "text": "Website with Quarto 2024-08-03 \n    \n            \n                \n                \n                    quarto\n                \n                \n            \n            \n    Tips on quarto website\n  \n\n\n\n\nNo matching items"
  },
  {
    "objectID": "blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/index.html",
    "href": "blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/index.html",
    "title": "Creating Custom Color Palettes with ggplot2",
    "section": "",
    "text": "One of the perks of making data visualizations in ggplot2 is that nearly everything is easily customizable, meaning your plots can stick to a common style with the fonts and elements specified by your organization’s or your own personal style guide (hopefully you have a custom theme to make this easier!). When it comes to using colors in data visualizations, if you find yourself typing in the same hex codes often enough that you start to memorize them—speaking from experience here—it’s probably time to codify those colors and palettes so you can reference them more easily when creating plots. The examples below will show you how to specify colors and palettes and then use those palettes to create your own scale_color and scale_fill functions for use in plots, for both discrete and continuous data.\nThis blog post by Simon Jackson and this one by Garrick Aden-Buie were both incredibly helpful in helping me figure out how to do this. I somewhat combined their approaches to get this method that worked for my needs, and hopefully either this method or one of theirs is helpful for you!"
  },
  {
    "objectID": "blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/index.html#why-custom-palettes",
    "href": "blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/index.html#why-custom-palettes",
    "title": "Creating Custom Color Palettes with ggplot2",
    "section": "",
    "text": "One of the perks of making data visualizations in ggplot2 is that nearly everything is easily customizable, meaning your plots can stick to a common style with the fonts and elements specified by your organization’s or your own personal style guide (hopefully you have a custom theme to make this easier!). When it comes to using colors in data visualizations, if you find yourself typing in the same hex codes often enough that you start to memorize them—speaking from experience here—it’s probably time to codify those colors and palettes so you can reference them more easily when creating plots. The examples below will show you how to specify colors and palettes and then use those palettes to create your own scale_color and scale_fill functions for use in plots, for both discrete and continuous data.\nThis blog post by Simon Jackson and this one by Garrick Aden-Buie were both incredibly helpful in helping me figure out how to do this. I somewhat combined their approaches to get this method that worked for my needs, and hopefully either this method or one of theirs is helpful for you!"
  },
  {
    "objectID": "blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/index.html#defining-custom-colors-and-palettes",
    "href": "blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/index.html#defining-custom-colors-and-palettes",
    "title": "Creating Custom Color Palettes with ggplot2",
    "section": "Defining custom colors and palettes",
    "text": "Defining custom colors and palettes\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\npenguins &lt;- palmerpenguins::penguins\n\nThese examples use the penguins data set from the wonderful palmerpenguins package. Let’s imagine that you work for Penguin Corp and regularly create reports and visualizations with various penguin-related data. Penguin Corp has a style guide that specifies the colors and palettes that should be used, and while you can always specify the colors manually in ggplot2 visualizations, it’s much easier to define the colors and palettes and then reference them through your own scale_fill and scale_color functions. (These are all functions that can be dropped easily into an internal package!)\nFirst, start by defining the various colors you need.\n\npenguin_corp_color &lt;- function(...) {\n\n  penguin_corp_colors &lt;- c(\n    `pink`     = \"#F7B1AB\",\n    `lavender` = \"#807182\",\n    `gray`     = \"#E3DDDD\",\n    `brown`    = \"#A45C3D\",\n    `purple`   = \"#1C0221\")\n\n  cols &lt;- c(...)\n\n  if (is.null(cols))\n    return (penguin_corp_colors)\n\n  penguin_corp_colors[cols]\n}\n\nThat function can be used to show the definition of a specific color:\n\npenguin_corp_color(\"lavender\")\n\n lavender \n\"#807182\" \n\n\nThat penguin_corp_color function then becomes the base of the penguin_corp_palette function below, where those defined colors are combined into palettes. Your organization might have primary and secondary palettes, or palettes designed for specific uses, but here we’ll define a main palette as well as a highlight palette for when we want just two colors.\n\npenguin_corp_palette &lt;- function(palette = \"main\", ...) {\n\n  penguin_corp_palettes &lt;- list(\n    `main` = penguin_corp_color(\"lavender\", \"gray\", \"pink\", \"brown\"),\n    \n    `highlight` = penguin_corp_color(\"purple\", \"gray\")\n  )\n\n  penguin_corp_palettes[[palette]]\n\n}\n\n\npenguin_corp_palette(\"main\")\n\n lavender      gray      pink     brown \n\"#807182\" \"#E3DDDD\" \"#F7B1AB\" \"#A45C3D\" \n\n\nThe show_col function from the scales package is a nifty way to showcase all the colors available in a given palette:\n\nscales::show_col(penguin_corp_palette(\"main\"), cex_label = 2)"
  },
  {
    "objectID": "blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/index.html#creating-your-own-scale_color-and-scale_fill-functions",
    "href": "blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/index.html#creating-your-own-scale_color-and-scale_fill-functions",
    "title": "Creating Custom Color Palettes with ggplot2",
    "section": "Creating your own scale_color and scale_fill functions",
    "text": "Creating your own scale_color and scale_fill functions\nHaving the colors and palettes defined is a great first step, but you can go even further and apply those into your own scale_fill and scale_color functions. The first step is a helper function, here called palette_gen. This function has two arguments, the name of the palette (“main” will be our default) and the direction (so you can flip the scale if necessary), and essentially creates another function that will be used in the scale_fill and scale_color functions. (The n there refers to the number of colors that would be needed for a particular plot.)\n\npalette_gen &lt;- function(palette = \"main\", direction = 1) {\n\n  function(n) {\n\n    if (n &gt; length(penguin_corp_palette(palette)))\n      warning(\"Not enough colors in this palette!\")\n\n    else {\n\n      all_colors &lt;- penguin_corp_palette(palette)\n\n      all_colors &lt;- unname(unlist(all_colors))\n\n      all_colors &lt;- if (direction &gt;= 0) all_colors else rev(all_colors)\n\n      color_list &lt;- all_colors[1:n]\n\n    }\n  }\n}\n\nThe function above is for discrete color scales. If you also want to use continuous color scales, the function below uses the existing colorRampPalette function to interpolate the necessary colors between the ones you have chosen in your palette.\n\npalette_gen_c &lt;- function(palette = \"main\", direction = 1, ...) {\n\n  pal &lt;- penguin_corp_palette(palette)\n\n  pal &lt;- if (direction &gt;= 0) pal else rev(pal)\n\n  colorRampPalette(pal, ...)\n\n}\n\nWith that helper function created, you can write the actual functions to be used with ggplot2. I’ve called mine scale_fill_penguin, which takes the same two arguments as before: palette and direction.\n\nscale_fill_penguin &lt;- function(palette = \"main\", direction = 1, ...) {\n\n  ggplot2::discrete_scale(\n    \"fill\", \"penguin\",\n    palette_gen(palette, direction),\n    ...\n  )\n}\n\nYou can use the same syntax for scale_color. (Fun fact: I learned from Garrick’s post that the ggplot2 convention is to create a scale_colour function and then replicate it as scale_color.)\n\nscale_colour_penguin &lt;- function(palette = \"main\", direction = 1, ...) {\n\n  ggplot2::discrete_scale(\n    \"colour\", \"penguin\",\n    palette_gen(palette, direction),\n    ...\n  )\n}\n\nscale_color_penguin &lt;- scale_colour_penguin\n\nAgain, those are for discrete color scales. If you need a continuous scale, use a function like this:\n\nscale_color_penguin_c &lt;- function(palette = \"main\", direction = 1, ...) {\n\n  pal &lt;- palette_gen_c(palette = palette, direction = direction)\n\n  scale_color_gradientn(colors = pal(256), ...)\n\n}"
  },
  {
    "objectID": "blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/index.html#using-these-colors-in-plots",
    "href": "blog/2022-10-11-creating-custom-color-palettes-with-ggplot2/index.html#using-these-colors-in-plots",
    "title": "Creating Custom Color Palettes with ggplot2",
    "section": "Using these colors in plots",
    "text": "Using these colors in plots\nLet’s look at some examples to see the various ways these functions can be used to customize colors with ggplot2. Below is a very simple bar chart using the palmerpenguins::penguins data set.\n\npenguins %&gt;% \n  count(species) %&gt;% \n  ggplot(aes(x = species, y = n)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"The count of each species in the palmerpenguins data set\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  theme_here() +\n  theme(axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\n\n\n\n\n\n\nThe new penguin_corp_color function can be used to specifically define a color. In the plot below, penguin_corp_color(\"lavender\") is the fill argument in the geom_bar layer to make all of the bars that specific shade of lavender.\n\npenguins %&gt;% \n  count(species) %&gt;% \n  ggplot(aes(x = species, y = n)) +\n  geom_bar(stat = \"identity\", fill = penguin_corp_color(\"lavender\")) +\n  labs(title = \"The count of each species in the palmerpenguins data set\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  theme_here() +\n  theme(axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        panel.grid.major.x = element_blank())\n\n\n\n\n\n\n\n\nWe could also add fill = species to the aes layer (meaning that each species will have its own color) and then use scale_fill_penguin(palette = \"main\") to automatically apply our “main” color palette.\n\npenguins %&gt;% \n  count(species) %&gt;% \n  ggplot(aes(x = species, y = n, fill = species)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_penguin(palette = \"main\") +\n  labs(title = \"The count of each species in the palmerpenguins data set\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  theme_here() +\n  theme(axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        legend.position = \"none\",\n        panel.grid.major.x = element_blank())\n\n\n\n\n\n\n\n\nOr if you want to use the custom colors but not a specific palette, add a scale_fill_manual layer and specify the values using the penguin_corp_color function.\n\npenguins %&gt;% \n  count(species) %&gt;% \n  ggplot(aes(x = species, y = n, fill = species)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = \n                      unname(c(penguin_corp_color(\"brown\",\"gray\",\"purple\")))) +\n  labs(title = \"The count of each species in the palmerpenguins data set\") +\n  scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +\n  theme_here() +\n  theme(axis.ticks = element_blank(),\n        axis.title = element_blank(),\n        legend.position = \"none\",\n        panel.grid.major.x = element_blank())\n\n\n\n\n\n\n\n\nLastly, below is an example of a continuous color scale, with our scale_color_penguin_c function specifying the palette to be used.\n\npenguins |&gt; \n  filter(!is.na(sex)) |&gt; \n  ggplot(aes(x = sex, y = body_mass_g, color = bill_depth_mm)) +\n  geom_jitter(size = 3, width = 0.3) +\n  scale_color_penguin_c(palette = \"highlight\", direction = -1) +\n  labs(title = \"Bill depth and body mass by sex\",\n       y = \"Body mass (g)\",\n       color = \"Bill depth (mm)\") +\n  theme_here() +\n  theme(axis.ticks = element_blank(),\n        axis.title.x = element_blank(),\n        panel.grid.major.x = element_blank())"
  },
  {
    "objectID": "blog/2024-02-11-moving-to-quarto/index.html",
    "href": "blog/2024-02-11-moving-to-quarto/index.html",
    "title": "Website with Quarto",
    "section": "",
    "text": "If you use Netlify (which I highly recommed, as the Quarto/GitHub/Netlify integration is so seamless), you can supply a redirects file that lists all the old urls and their new locations. Netlify builds from Quarto’s _site directory, so just put the _redirects file (here’s mine) in your _site folder, right? I tried that first, but it doesn’t work because the _site directory rebuilds when you rerender your site. Instead, I moved my file into the static folder, which gets copied over to _site as described above.\nMy use case here for redirects is pretty simple: I had a small number of urls to switch, and I don’t expect to frequently add to that list. If your situation is more complicated and/or you want that _redirects file to automatically generate shorter urls when you create new pages, there are options described here and here."
  },
  {
    "objectID": "blog/2024-02-11-moving-to-quarto/index.html#site-organization",
    "href": "blog/2024-02-11-moving-to-quarto/index.html#site-organization",
    "title": "Moving My Website from blogdown to Quarto",
    "section": "Site organization",
    "text": "Site organization\nFirst things first: where do all the files go? My Quarto website structure is fairly similar to the Hugo/blogdown structure, only even simpler. Before, I had a content folder that held blog and talks folders; now those folders are right at the root of the website.\nHere’s what’s included:\n\n_quarto.yml: YAML options for the overall website\nindex.qmd: file for the homepage\n404.qmd: my own 404 page in case someone finds a broken link\ntheme.scss: CSS for the theme of my website\nblog/ and talks/: described below\nstatic/: described below\n_site/: what Quarto creates when it renders the site and what Netlify builds off of\n_freeze/: what Quarto creates when you set freeze: auto to avoid rerunning code all the time\n_extensions/: what Quarto creates when you use extensions"
  },
  {
    "objectID": "blog/2024-02-11-moving-to-quarto/index.html#blog-and-talks-folders",
    "href": "blog/2024-02-11-moving-to-quarto/index.html#blog-and-talks-folders",
    "title": "Moving My Website from blogdown to Quarto",
    "section": "blog and talks folders",
    "text": "blog and talks folders\nBoth of these folders contain an index.qmd file to specify the YAML options of the landing page, which lists all of the blog posts or talks. Here’s what mine looks like in the talks folder:\ntitle: &lt;p class=\"center-text\"&gt;Talks&lt;/p&gt;\nauthor: \"\"\ncomments: false\nlisting:\n  contents: \"index.qmd\"\n  sort: \"date desc\"\n  type: \"default\"\n  date-format: \"iso\"\n  fields: [image, date, title, subtitle, author, summary, description, slides, extsite, repo]  \n  page-size: 6\n  template: talk-listing.ejs\npage-layout: full\ntitle-block-banner: true\nformat:\n  html:\n    css: talks.css\nThe listing section specifies which files should be included on the listings page: anything titled index.qmd in the folder and subfolders will get a listing. Mine are sorted descending by date, with six items per page, and I specify the layout of the page with the talk-listing.ejs file.\n\nListing templates\nControlling the look of my listing pages was the hardest part of the entire process! I don’t love the look of a standard listing page, but it was tough figuring out how to make changes. Quarto has some documentation on creating custom listings pages, but you need to create an EJS template, which I wasn’t familiar with. Per the documentation: EJS templates allow you to generate HTML using plain javascript, making it easy to loop through items and output their values in your custom HTML.\nNormally, I would start with the code of the standard/default option and tinker around until I figured out how to change the elements I wanted. But the Quarto default templates were more complex than I needed and didn’t serve as a great starting point. So I went to option number two: adapt the work of people who know more than I do. I looked at lots of Quarto websites—specifically, lots of Quarto listings pages—in an attempt to find something custom that I liked well enough to use as a starting point. I liked the publications page of the AffCom lab at KU as well as the talks page on Andrew Heiss’s site. Looking at those templates (here and here) was enough to get me started.\nThe template for my blog is pretty simple with the title of the post, the publication date floated to the right, the categories, and the summary. The template for my talks page is similar but also includes buttons for any talk-related links I have like slides, a website, or a repo. The template files pull out the correct elements in the appropriate order from the YAML options of the index.qmd files, and then my .css pages create the style that I want for those listings.\n\n\nMetadata files\nIncluding a _metadata.yml file in both my blog and talks folder is useful to specify YAML options that should apply to all of the index.qmd files within those folders. This way I don’t have to, for example, add my name as the author in each file or specify my css file or customize my table of contents each time I write a blog post.\n# Date format\ndate-format: \"YYYY-MM-DD\"\n\n# Enable banner style title blocks\ntitle-block-banner: \"#1F2041\"\n\n# Add blog-post class to the banner header area\nformat: \n  html:\n    css: blog.css\n    knitr:\n      opts_chunk:\n        dev: png\n        dev.args:\n          bg: transparent\n\n# Default for table of contents\ntoc: true\ntoc-title: CONTENTS\ntoc-location: left\n\nfreeze: true\n\n# Default author\nauthor:\n  - name: Meghan Hall\n\n\nChanging metadata labels\nThis was one of those little things that fell into the “not necessary but would be nice” category. The standard metadata labels for author and date look like so:\n\nThis worked nicely for my blog posts, but for my talk pages, I wanted it to look more like the following:\n\nI almost gave up more than once on this change since it was such a small detail, but I figured it out! And maybe there’s a simpler way to achieve this, but I supplied my own title-block.html file in the talks directory to more clearly specify the output of that title block.\nI created my file based on my own website’s generated html for a blog post (which you can access on Chrome by right-clicking and selecting View Page Source), plus the standard Quarto title-block.html file."
  },
  {
    "objectID": "blog/2024-02-11-moving-to-quarto/index.html#static-files",
    "href": "blog/2024-02-11-moving-to-quarto/index.html#static-files",
    "title": "Moving My Website from blogdown to Quarto",
    "section": "Static files",
    "text": "Static files\nMy website has blog posts as well as landing pages for all of the talks I’ve given (the blog and talks folder, respectively, as described above), but it also needs to hold the various slide decks for all of those talks. When using blogdown, it was easy to drop all of that content into a static folder that you could link to from the root of your website.\nBut where should those files live within the Quarto structure? Netlify builds your Quarto site from the _site directory, but that directory rebuilds when you rerender your site. Google came to the rescue, and I followed Garrick Aden-Buie’s advice to write a little post-render script.\nThe post-render section of my _quarto.yml code instructs Quarto to copy everything in my static folder over to the _site folder after everything has finished rendering.\nproject:\n  type: website\n  render:\n    - \"blog/**/*.qmd\"\n    - \"talks/**/*.qmd\"\n    - \"index.qmd\"\n    - \"blog/index.qmd\"\n    - \"talks/index.qmd\"\n    - \"404.qmd\"\n  post-render:\n    - \"cp -r static/. _site/\"\nThe period after static/ is important because I want those files (most of which are contained in a slides directory) to be copied directly over to the root of my website in the _site folder without the static folder itself. That way the links are formatted like slides/rstudioconf, not static/slides/rstudioconf."
  },
  {
    "objectID": "blog/2024-02-11-moving-to-quarto/index.html#redirects",
    "href": "blog/2024-02-11-moving-to-quarto/index.html#redirects",
    "title": "Moving My Website from blogdown to Quarto",
    "section": "Redirects",
    "text": "Redirects\nWhen migrating your website over to Quarto, chances are some of your links might change. For example, on my old website a sample link for a talk might be /talk/rladiesparis/, but now I’ve changed it to /talks/2022-09-08-rladies-paris/. I have those old links floating around on Twitter and on other websites, so I’d like to make sure that they still work and point to the new links. Enter: redirects.\nIf you use Netlify (which I highly recommed, as the Quarto/GitHub/Netlify integration is so seamless), you can supply a redirects file that lists all the old urls and their new locations. Netlify builds from Quarto’s _site directory, so just put the _redirects file (here’s mine) in your _site folder, right? I tried that first, but it doesn’t work because the _site directory rebuilds when you rerender your site. Instead, I moved my file into the static folder, which gets copied over to _site as described above.\nMy use case here for redirects is pretty simple: I had a small number of urls to switch, and I don’t expect to frequently add to that list. If your situation is more complicated and/or you want that _redirects file to automatically generate shorter urls when you create new pages, there are options described here and here."
  },
  {
    "objectID": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html",
    "href": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html",
    "title": "Tips for Custom Parameterized PDFs in Quarto",
    "section": "",
    "text": "Creating parameterized documents (i.e., documents with outputs—text, plots, tables, etc—that change based on the values of the parameters that you select) is such a common task for data analysts, and it’s a task that can be made much easier with Quarto. (Quarto is a new open-source technical publishing system from RStudio. It is similar in many ways to R Markdown, except that it doesn’t require R, supports more languages, and combines the functionality of many R Markdown packages, e.g., xaringan, bookdown.) Those documents can take many output forms, but this post focuses specifically on PDF reports. For the example report I’m walking through here, I used data from the wonderful palmerpenguins data package because who doesn’t like 🐧?!\nThe full PDF is available here, and below is a screenshot, along with some annotations as to what elements in the report change automatically based on our parameters.\n\nToday’s focus is mostly on the Quarto elements: how to customize the look of our parameterized PDF (like those colors and fonts!) and how to render it easily for the parameter values that I want. I won’t go into too much detail about how I incorporated the parameters into the R code itself, but the full .qmd file is here and I’m happy to answer any questions about those elements! (Throughout, I am coming from the perspective of using R and RStudio, though many of the customization elements will still apply if you are using a different coding language and/or IDE.)"
  },
  {
    "objectID": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#parameterized-reports-in-r-and-quarto",
    "href": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#parameterized-reports-in-r-and-quarto",
    "title": "Tips for Custom Parameterized PDFs in Quarto",
    "section": "",
    "text": "Creating parameterized documents (i.e., documents with outputs—text, plots, tables, etc—that change based on the values of the parameters that you select) is such a common task for data analysts, and it’s a task that can be made much easier with Quarto. (Quarto is a new open-source technical publishing system from RStudio. It is similar in many ways to R Markdown, except that it doesn’t require R, supports more languages, and combines the functionality of many R Markdown packages, e.g., xaringan, bookdown.) Those documents can take many output forms, but this post focuses specifically on PDF reports. For the example report I’m walking through here, I used data from the wonderful palmerpenguins data package because who doesn’t like 🐧?!\nThe full PDF is available here, and below is a screenshot, along with some annotations as to what elements in the report change automatically based on our parameters.\n\nToday’s focus is mostly on the Quarto elements: how to customize the look of our parameterized PDF (like those colors and fonts!) and how to render it easily for the parameter values that I want. I won’t go into too much detail about how I incorporated the parameters into the R code itself, but the full .qmd file is here and I’m happy to answer any questions about those elements! (Throughout, I am coming from the perspective of using R and RStudio, though many of the customization elements will still apply if you are using a different coding language and/or IDE.)"
  },
  {
    "objectID": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#yes-this-means-latex",
    "href": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#yes-this-means-latex",
    "title": "Tips for Custom Parameterized PDFs in Quarto",
    "section": "Yes, this means LaTeX",
    "text": "Yes, this means LaTeX\nSimilarly to how Quarto uses reveal.js to make HTML presentations, Quarto uses LaTeX to make PDF documents. Part of the beauty of Quarto is that you don’t need to learn LaTeX—you can create great PDFs without it. But just like I enjoy learning more about CSS to customize my Quarto HTML products, I enjoy learning more about LaTex to customize my PDF products!\nStandard disclaimer: I am not a LaTeX expert! The tips I offer below are certainly not the only solutions, and depending on your particular use cases they may not be the best solutions. But I think they are useful for someone getting their feet wet with LaTeX and learning how to use LaTeX elements to customize the look of their Quarto PDFs.\nLet’s review how things work structurally: Quarto documents start with a YAML header. Below is the YAML header for this PDF.\n---\nformat: \n  pdf: \n    mainfont: \"Avenir\"\n    sansfont: \"Avenir\"\n    geometry:\n      - top=0.75in\n      - right=0.75in\n      - bottom=0.75in\n      - left=0.75in\n      - heightrounded\n    number-sections: true\n    include-in-header: \n      - \"penguin-header.tex\"\n    toc: false\neditor: source\nexecute:\n  warning: false\n  echo: false\nparams:\n  species: 'Adelie'\n  year: 2009\n---\nYou’ll see that the include-in-header option references a penguin-header.tex file. You can include raw LaTeX directly in the body of your Quarto document, which we’ll incorporate below, and/or you can reference LaTeX files (that’s the .tex extension) that can be executed before your Quarto document (as part of what’s known as the LaTeX preamble). Having a file like this is handy whether you want to customize an entire header page (resources on that available below) or to specify a few LaTeX packages and commands before you get into your Quarto document.\nThis is the content of our penguin-header.tex file:\n\\let\\paragraph\\oldparagraph\n\\let\\subparagraph\\oldsubparagraph\n\n\\usepackage{xcolor}\n\\usepackage{titlesec}\n\\usepackage[parfill=0pt]{parskip}\n\\usepackage{fontspec}\n\n\\setsansfont{Prompt}[\n    Path=Prompt/,\n    Scale=0.9,\n    Extension = .ttf,\n    UprightFont=*-Regular,\n    BoldFont=*-Bold,\n    ItalicFont=*-Italic,\n    ]\n\n\\definecolor{Chinstrap}{HTML}{C25BCC}\n\\definecolor{Gentoo}{HTML}{047075}\n\\definecolor{Adelie}{HTML}{FF6600}\n\n\\titleformat{\\section}\n  {\\sffamily\\Large\\bfseries}{\\thesection}{1em}{}[{\\titlerule[0.8pt]}]\nYou specify LaTeX packages like \\usepackage{xcolor}. Here, we’re adding a package to help us define custom colors, a package for custom fonts, and a package to help make nifty section headers."
  },
  {
    "objectID": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#custom-fonts",
    "href": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#custom-fonts",
    "title": "Tips for Custom Parameterized PDFs in Quarto",
    "section": "Custom fonts",
    "text": "Custom fonts\nIf you want to use a system font in your PDF (meaning it’s already on your computer), you can adjust the values of the mainfont, sansfont and monofont options in the header YAML.\n---\nformat: \n  pdf: \n    mainfont: \"Avenir\"\n    sansfont: \"Avenir\"\nIf you would rather use a Google font, you can download it from the site and save the files into the same directory as your Quarto document. For the example below, I downloaded the Prompt font and added the following code to my penguin-header.tex file. This is setting my sans serif font to Prompt.\n\\setsansfont{Prompt}[\n    Path=Prompt/,\n    Scale=0.9,\n    Extension = .ttf,\n    UprightFont=*-Regular,\n    BoldFont=*-Bold,\n    ItalicFont=*-Italic,\n    ]\nAnd then the command \\sffamily is the first line (below the YAML) in my Quarto document and states that I want to use the font I specified in the penguin-header.tex file. This is an example of including raw LaTeX in the body of your document."
  },
  {
    "objectID": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#custom-colors",
    "href": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#custom-colors",
    "title": "Tips for Custom Parameterized PDFs in Quarto",
    "section": "Custom colors",
    "text": "Custom colors\nUsing a LaTeX package like xcolor allows us to define custom colors like so: \\definecolor{Chinstrap}{HTML}{C25BCC}. The penguin-header.tex file defines a color for each penguin species—Chinstrap, Adelie, and Gentoo—that we can use to render different colors depending on which parameter value of species we select.\nBut how to connect the custom-defined color to our parameter so that the right one is used?\nIn an R code block, you can refer to your report parameters with params$species. If you want to reference these parameters in the Quarto text, enclose like so: `r params$species`. And what’s so neat about Quarto is that you can use this inline code as part of the LaTeX code. So the following command will set the text color to the custom color we defined based on the species determined via the parameter: \\color{`r params$species`}. If our parameter selects the Adelie species, then that piece of code will evaluate as \\color{Adelie} and our orange-y #FF6600 will be used. If you want to set the color back to black, use \\color{black}."
  },
  {
    "objectID": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#rendering-parameterized-reports",
    "href": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#rendering-parameterized-reports",
    "title": "Tips for Custom Parameterized PDFs in Quarto",
    "section": "Rendering parameterized reports",
    "text": "Rendering parameterized reports\nThere are three ways to render this type of parameterized report using Quarto. In increasing order of complexity (and usefulness!):\nFirst. Manually change the parameter values in the header YAML of your .qmd file and hit Render in RStudio. This will create a PDF file in the same directory as your .qmd file with the same name as your .qmd file but with a .pdf extension. This is great for one-offs or for testing!\nSecond. If you prefer to work in the terminal, you can use the following command: quarto render penguins.qmd -P species:'Adelie' -P year:'2009'\nThird. For this palmerpenguins data, we have potentially nine separate PDF reports to create: three years for three species. That’s a little annoying to do via the first two methods, and you can imagine how really annoying it could get if you had even more parameter combinations. Thankfully, we can leverage the quarto::quarto_render() function in R to automatically create a report for each parameter combination we want and name that file in a way that we specify.\nrunpdfs &lt;- function(species, year) {\n  quarto::quarto_render(\n    \"penguins.qmd\",\n    output_format = \"pdf\",\n    execute_params = list(species = species, year = year),\n    output_file = glue::glue(\"{species} {year}.pdf\")\n  )\n}\n\npurrr::map2(unique(penguins$species), unique(penguins$year), \n            runpdfs)\nThe first chunk of code defines a new function called runpdfs that is based on the quarto::quarto_render() function. The two arguments to runpdfs are the two Quarto report parameters we have: species and year. Those arguments are used in the execute_params argument to specify the parameter values to Quarto and in the output_file argument to specify the name of the files.\nThe second chunk of code uses map2() from purrr to iteratively run that new function, runpdfs, for every unique combination of species and year from the penguins data set.\nThe code above will result in nine PDF files. The two available examples are Adelie 2009.pdf and Gentoo 2007.pdf."
  },
  {
    "objectID": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#resources-for-learning-more",
    "href": "blog/2022-09-25-tips-for-custom-parameterized-pdfs-in-quarto/index.html#resources-for-learning-more",
    "title": "Tips for Custom Parameterized PDFs in Quarto",
    "section": "Resources for learning more",
    "text": "Resources for learning more\nThe Quarto documentation for PDFs covers the basics of creating PDFs in Quarto and also lists all the available PDF options. There’s also the list of LaTeX variables for Pandoc.\nFor more specifics about customizing LaTeX within Quarto, I found the title page resources from NMFS Open Science to be incredibly helpful for inspiration and also for learning what the possibilities are.\nOne of my personal favorite methods for learning is reviewing others’ code. The files for this example, penguins.qmd and penguins-header.tex, are available on my GitHub and were designed to showcase some basic LaTeX structure and commands."
  },
  {
    "objectID": "puplications.html",
    "href": "puplications.html",
    "title": "Publications",
    "section": "",
    "text": "See also:"
  },
  {
    "objectID": "puplications.html#publications-by-date",
    "href": "puplications.html#publications-by-date",
    "title": "Publications",
    "section": "Publications by date",
    "text": "Publications by date\n*shared first authors\n2022\nMolalign Gualu Gobena, Yebelay Berelie. Modeling the Determinant of Time to Age at First Marriage among Women in Ethiopia using Cox models with mixed effects. eLife 2022; 11: e66695. Link to paper\nKrause S, Gfrerer S, von Kügelgen A, Reuse C, Dombrowski N, Villanueva L, et al. The importance of biofilm formation for cultivation of a Micrarchaeon and its interactions with its Thermoplasmatales host. Nat Commun 2022; 13: 1735. Link to paper\nLangwig MV, De Anda V, Dombrowski N, Seitz KW, Rambo IM, Greening C, et al. Large-scale protein level comparison of Deltaproteobacteria reveals cohesive metabolic groups. ISME J 2022; 16: 307–320. Link to paper\n2021\nDe Anda V, Chen L-X, Dombrowski N, Hua Z-S, Jiang H-C, Banfield JF, et al. Brockarchaeota, a novel archaeal phylum with unique and versatile carbon cycling pathways. Nat Commun 2021; 12: 2404. Link to paper\nMayer T, Mari A, Almario J, Murillo-Roos M, Syed M. Abdullah H, Dombrowski N, et al. Obtaining deeper insights into microbiome diversity using a simple method to block host and nontargets in amplicon sequencing. Molecular Ecology Resources 2021; 21: 1952–1965. Link to paper"
  },
  {
    "objectID": "pages/about.html#skills",
    "href": "pages/about.html#skills",
    "title": "About Me",
    "section": "Skills",
    "text": "Skills\n\n Statistical Software: R | STATA | SAS | SPSS\nData Collection Apps: Kobo toolbox | SurveyCTO | REDCap\nProject Management: Project Management | Surveys | Budget\nImpact Evaluation: Causal Inference | Impact Evaluation\nDashboard: Power BI | R Markdown (flexdashboard) | Shiny App\nStudy Design: Study Design | Sampling Technique | Statistical Modelling"
  },
  {
    "objectID": "pages/about.html#skills-1",
    "href": "pages/about.html#skills-1",
    "title": "About Me",
    "section": "Skills",
    "text": "Skills"
  },
  {
    "objectID": "pages/about.html#skills-2",
    "href": "pages/about.html#skills-2",
    "title": "About Me",
    "section": "Skills",
    "text": "Skills\n\nSkills\n\n\n\n\n\n\n&lt;div class=\"featurette-feature-icon\"&gt;\n  &lt;i class=\"fab fa-r-project\"&gt;&lt;/i&gt;\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-name\"&gt;\n  Statistical Software\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-description\"&gt;\n  R | STATA | SAS | SPSS\n&lt;/div&gt;\n\n\n&lt;div class=\"featurette-feature-icon\"&gt;\n  &lt;i class=\"fas fa-mobile-alt\"&gt;&lt;/i&gt;\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-name\"&gt;\n  Data Collection Apps\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-description\"&gt;\n  Kobo toolbox | SurveyCTO | REDCap\n&lt;/div&gt;\n\n\n&lt;div class=\"featurette-feature-icon\"&gt;\n  &lt;i class=\"fas fa-project-diagram\"&gt;&lt;/i&gt;\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-name\"&gt;\n  Project Management\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-description\"&gt;\n  Project Management | Surveys | Budget\n&lt;/div&gt;\n\n\n&lt;div class=\"featurette-feature-icon\"&gt;\n  &lt;i class=\"fas fa-chart-line\"&gt;&lt;/i&gt;\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-name\"&gt;\n  Impact Evaluation\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-description\"&gt;\n  Causal Inference | Impact Evaluation\n&lt;/div&gt;\n\n\n&lt;div class=\"featurette-feature-icon\"&gt;\n  &lt;i class=\"fas fa-chart-bar\"&gt;&lt;/i&gt;\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-name\"&gt;\n  Dashboard\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-description\"&gt;\n  Power BI | R Markdown (flexdashboard) | Shiny App\n&lt;/div&gt;\n\n\n&lt;div class=\"featurette-feature-icon\"&gt;\n  &lt;i class=\"fas fa-clipboard-list\"&gt;&lt;/i&gt;\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-name\"&gt;\n  Study Design\n&lt;/div&gt;\n&lt;div class=\"featurette-feature-description\"&gt;\n  Study Design | Sampling Technique | Statistical Modelling\n&lt;/div&gt;"
  },
  {
    "objectID": "puplications.html#publications-cronolgical-order",
    "href": "puplications.html#publications-cronolgical-order",
    "title": "Publications",
    "section": "Publications cronolgical order",
    "text": "Publications cronolgical order\n\nMolalign Gualu Gobena, Yebelay Berelie. Modeling the Determinant of Time to Age at First Marriage among Women in Ethiopia using Cox models with mixed effects. Reproductive Health volume 19, Article number: 32 (2022). Link to paper\nMuluneh Alene, Leltework Yismaw, Yebelay Berelie, Bekalu Kassie, Reta Yeshambe, Moges Agazhe Assemie. Prevalence and determinants of unintended pregnancy in Ethiopia: A systematic review and meta-analysis of observational studies. Link to paper\n\n\n\nGobena, M.G. and Berelie, Y., 2021. Modeling the Determinant of Time to Age at First Marriage among Women in Ethiopia using Cox models with mixed effects. BMC Reproductive Health. DOI: https://doi.org/10.1186/s12978-022-01339\nBerelie, Y., Yeshiwas, D., Yismaw, L., Alene, M. (2020). Determinants of institutional delivery service utilization in Ethiopia: a population-based cross-sectional study. BMC Public Health 20, 1077. doi: https://doi.org/10.1186/s12889-020-09125-2\n\n\n\nAlene M, Yismaw L, Berelie Y, Kassie B, Yeshambel R, Assemie MA (2020). Prevalence and determinants of unintended pregnancy in Ethiopia: A systematic review and meta-analysis of observational studies. PLoS ONE 15(4): e0231012. doi: https://doi.org/10.1371/journal.pone.0231012\n\n\n\nYeshiwas, D., & Berelie, Y. (2020). Forecasting the Covolatility of Coffee Arabica and Crude Oil Prices: A Multivariate GARCH Approach with High-Frequency Data. Journal of Probability and Statistics 2020(2):1-10. Doi: https://doi.org/10.1155/2020/1424020.\n\n\n\nBerelie, Y., Yismaw, L., Tesfa, E., & Alene, M. (2019). Risk factors for under-five mortality in Ethiopia: Evidence from the 2016 Ethiopian Demographic and Health Survey. South African Journal of Child Health, 13(3), 137-140. DOI: 10.7196/SAJCH.2019.v13i3.1645\nAlene, M., Yismaw, L., Berelie, Y., & Kassie, B. (2019). Health care utilization for common childhood illnesses in rural parts of Ethiopia: evidence from the 2016 Ethiopian demographic and health survey. BMC Public Health, 19(1), 57. Doi: https://doi.org/10.1186/s12889-019-6397-x\n\nAbstract summited for the conference :\n\nSisay A., Yebelay Berelie, Biniyam E., Kyle Milligan, Snigdha V.,  Helen C., Dereje H., Solomon A., Wondimu T., Minesh Pradyuman. Successful suppression of HIV viral load in PWH with virologic failure in PEPFAR-supported clinics – Addis Ababa, Ethiopia, 2015–2021,  submitted to AIDS 2022.\n\nManuscripts under review\n\nBerelie Y., Jim Todd, Robert Peck, 2023. A mixed model for assessing the impact of DTG-based ART regime on weight change in Tanzanian HIV patients. (Submitted to International AIDS).\n\nUnder preparation Works at CDC, Ethiopia\n\nSisay Alemayehu Abayneh, Yebelay Berelie, Biniyam Eskinder Seid, Dereje Habte, Wondimu Teferi, Minesh Shah Pradyuman. Rates of switching to second-line antiretroviral therapy after documented Virologic failure in Addis Ababa, Ethiopia.\nSisay Alemayehu Abayneh, Yebelay Berelie, Biniyam Eskinder Seid, Dereje Habte, Wondimu Teferi, Minesh Shah Pradyuman. Time to Viral Suppression after documented Virologic failure in Addis Ababa, Ethiopia.\n\nSeminar presentation:\n\nDifference-in-Differences (DID) for Impact Evaluation, October 25, 2021, Stellenbosch University, South Africa.\nInsight to Different Methods for Handling Missing Data: Application with R, July 5, 2021, Debre Markos University, Ethiopia."
  },
  {
    "objectID": "puplications.html#peer-reviewed-publications",
    "href": "puplications.html#peer-reviewed-publications",
    "title": "Publications",
    "section": "Peer reviewed Publications",
    "text": "Peer reviewed Publications\n\nGobena, M.G. and Berelie, Y., 2021. Modeling the Determinant of Time to Age at First Marriage among Women in Ethiopia using Cox models with mixed effects. BMC Reproductive Health.volume 19, Article number: 32 (2022). DOI link\nBerelie, Y., Yeshiwas, D., Yismaw, L., Alene, M. (2020). Determinants of institutional delivery service utilization in Ethiopia: a population-based cross-sectional study. BMC Public Health, 20, 1077. doi link\nAlene M, Yismaw L, Berelie Y, Kassie B, Yeshambel R, Assemie MA (2020). Prevalence and determinants of unintended pregnancy in Ethiopia: A systematic review and meta-analysis of observational studies. PLoS ONE 15(4): e0231012. doi link.\nYeshiwas, D., & Berelie, Y. (2020). Forecasting the Covolatility of Coffee Arabica and Crude Oil Prices: A Multivariate GARCH Approach with High-Frequency Data. Journal of Probability and Statistics 2020(2):1-10. Doi link.\nBerelie, Y., Yismaw, L., Tesfa, E., & Alene, M. (2019). Risk factors for under-five mortality in Ethiopia: Evidence from the 2016 Ethiopian Demographic and Health Survey. South African Journal of Child Health, 13(3), 137-140. DOI link.\nAlene, M., Yismaw, L., Berelie, Y., & Kassie, B. (2019). Health care utilization for common childhood illnesses in rural parts of Ethiopia: evidence from the 2016 Ethiopian demographic and health survey. BMC Public Health, 19(1), 57. Doi link"
  },
  {
    "objectID": "puplications.html#manuscripts-under-review",
    "href": "puplications.html#manuscripts-under-review",
    "title": "Publications",
    "section": "Manuscripts under review",
    "text": "Manuscripts under review\n\nBerelie Y., Jim Todd, Robert Peck, 2024. A mixed model for assessing the impact of DTG-based ART regime on weight change in Tanzanian HIV patients. (Submitted to International AIDS).\nMulusew J., Saba Y, Fikreselassie G. , Yebelay B. , et al., 2024. Maternal education and child vaccination in Ethiopia: A natural experiment. Elsevier, journal of Social Science & Medicine."
  },
  {
    "objectID": "puplications.html#under-preparation",
    "href": "puplications.html#under-preparation",
    "title": "Publications",
    "section": "Under preparation",
    "text": "Under preparation\n\nPrevalence of zero-dose children and factors associated before and after COVID-19 among children aged 12–23 months across 8 African countries.\nSisay Alemayehu Abayneh, Yebelay Berelie, Biniyam Eskinder Seid, Dereje Habte, Wondimu Teferi, Minesh Shah Pradyuman. Time to Viral Suppression after documented Virologic failure in Addis Ababa, Ethiopia."
  },
  {
    "objectID": "puplications.html#seminar-presentation",
    "href": "puplications.html#seminar-presentation",
    "title": "Publications",
    "section": "Seminar presentation:",
    "text": "Seminar presentation:\n\nDifference-in-Differences (DID) for Impact Evaluation, October 25, 2021, Stellenbosch University, South Africa.\nInsight to Different Methods for Handling Missing Data: Application with R, July 5, 2021, Debre Markos University, Ethiopia."
  }
]